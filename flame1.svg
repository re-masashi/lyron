<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="39196509"><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="645" width="3.0944%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="655.50">&lt;al..</text></g><g><title>alloc::string::String::push_str (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="629" width="3.0944%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="639.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="613" width="3.0944%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="623.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="597" width="3.0944%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="607.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="581" width="3.0944%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="591.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,212,910 samples, 3.09%)</title><rect x="0.0000%" y="565" width="3.0944%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1212910"/><text x="0.2500%" y="575.50">cor..</text></g><g><title>[[stack]] (2,736,505 samples, 6.98%)</title><rect x="0.0000%" y="661" width="6.9815%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2736505"/><text x="0.2500%" y="671.50">[[stack]]</text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (1,523,595 samples, 3.89%)</title><rect x="3.0944%" y="645" width="3.8871%" height="15" fill="rgb(228,23,34)" fg:x="1212910" fg:w="1523595"/><text x="3.3444%" y="655.50">core..</text></g><g><title>[ld-linux-x86-64.so.2] (1,561,501 samples, 3.98%)</title><rect x="6.9815%" y="661" width="3.9838%" height="15" fill="rgb(218,30,26)" fg:x="2736505" fg:w="1561501"/><text x="7.2315%" y="671.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,545,833 samples, 3.94%)</title><rect x="7.0215%" y="645" width="3.9438%" height="15" fill="rgb(220,122,19)" fg:x="2752173" fg:w="1545833"/><text x="7.2715%" y="655.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,545,833 samples, 3.94%)</title><rect x="7.0215%" y="629" width="3.9438%" height="15" fill="rgb(250,228,42)" fg:x="2752173" fg:w="1545833"/><text x="7.2715%" y="639.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,545,833 samples, 3.94%)</title><rect x="7.0215%" y="613" width="3.9438%" height="15" fill="rgb(240,193,28)" fg:x="2752173" fg:w="1545833"/><text x="7.2715%" y="623.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1,326,714 samples, 3.38%)</title><rect x="7.5805%" y="597" width="3.3848%" height="15" fill="rgb(216,20,37)" fg:x="2971292" fg:w="1326714"/><text x="7.8305%" y="607.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1,326,714 samples, 3.38%)</title><rect x="7.5805%" y="581" width="3.3848%" height="15" fill="rgb(206,188,39)" fg:x="2971292" fg:w="1326714"/><text x="7.8305%" y="591.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1,326,714 samples, 3.38%)</title><rect x="7.5805%" y="565" width="3.3848%" height="15" fill="rgb(217,207,13)" fg:x="2971292" fg:w="1326714"/><text x="7.8305%" y="575.50">[ld..</text></g><g><title>[unknown] (2,060,801 samples, 5.26%)</title><rect x="10.9653%" y="661" width="5.2576%" height="15" fill="rgb(231,73,38)" fg:x="4298006" fg:w="2060801"/><text x="11.2153%" y="671.50">[unkno..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (2,060,801 samples, 5.26%)</title><rect x="10.9653%" y="645" width="5.2576%" height="15" fill="rgb(225,20,46)" fg:x="4298006" fg:w="2060801"/><text x="11.2153%" y="655.50">lyronc..</text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="629" width="2.6683%" height="15" fill="rgb(210,31,41)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="639.50">&lt;a..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="613" width="2.6683%" height="15" fill="rgb(221,200,47)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="623.50">&lt;T..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="597" width="2.6683%" height="15" fill="rgb(226,26,5)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="607.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="581" width="2.6683%" height="15" fill="rgb(249,33,26)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="591.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="565" width="2.6683%" height="15" fill="rgb(235,183,28)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="575.50">al..</text></g><g><title>alloc::slice::hack::to_vec (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="549" width="2.6683%" height="15" fill="rgb(221,5,38)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="559.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="533" width="2.6683%" height="15" fill="rgb(247,18,42)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="543.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="517" width="2.6683%" height="15" fill="rgb(241,131,45)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="501" width="2.6683%" height="15" fill="rgb(249,31,29)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="511.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="485" width="2.6683%" height="15" fill="rgb(225,111,53)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="495.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="469" width="2.6683%" height="15" fill="rgb(238,160,17)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="479.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="453" width="2.6683%" height="15" fill="rgb(214,148,48)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="463.50">al..</text></g><g><title>alloc::alloc::alloc (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="437" width="2.6683%" height="15" fill="rgb(232,36,49)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="447.50">al..</text></g><g><title>__rdl_alloc (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="421" width="2.6683%" height="15" fill="rgb(209,103,24)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="431.50">__..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,045,861 samples, 2.67%)</title><rect x="13.5546%" y="405" width="2.6683%" height="15" fill="rgb(229,88,8)" fg:x="5312946" fg:w="1045861"/><text x="13.8046%" y="415.50">st..</text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (1,008,540 samples, 2.57%)</title><rect x="30.9189%" y="325" width="2.5730%" height="15" fill="rgb(213,181,19)" fg:x="12119127" fg:w="1008540"/><text x="31.1689%" y="335.50">&lt;l..</text></g><g><title>alloc::raw_vec::finish_grow (1,051,648 samples, 2.68%)</title><rect x="33.4919%" y="277" width="2.6830%" height="15" fill="rgb(254,191,54)" fg:x="13127667" fg:w="1051648"/><text x="33.7419%" y="287.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,195,082 samples, 5.60%)</title><rect x="33.4919%" y="325" width="5.6002%" height="15" fill="rgb(241,83,37)" fg:x="13127667" fg:w="2195082"/><text x="33.7419%" y="335.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,195,082 samples, 5.60%)</title><rect x="33.4919%" y="309" width="5.6002%" height="15" fill="rgb(233,36,39)" fg:x="13127667" fg:w="2195082"/><text x="33.7419%" y="319.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,195,082 samples, 5.60%)</title><rect x="33.4919%" y="293" width="5.6002%" height="15" fill="rgb(226,3,54)" fg:x="13127667" fg:w="2195082"/><text x="33.7419%" y="303.50">alloc::..</text></g><g><title>core::alloc::layout::Layout::array (1,143,434 samples, 2.92%)</title><rect x="36.1749%" y="277" width="2.9172%" height="15" fill="rgb(245,192,40)" fg:x="14179315" fg:w="1143434"/><text x="36.4249%" y="287.50">co..</text></g><g><title>core::alloc::layout::Layout::array::inner (1,143,434 samples, 2.92%)</title><rect x="36.1749%" y="261" width="2.9172%" height="15" fill="rgb(238,167,29)" fg:x="14179315" fg:w="1143434"/><text x="36.4249%" y="271.50">co..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (2,065,575 samples, 5.27%)</title><rect x="39.0921%" y="325" width="5.2698%" height="15" fill="rgb(232,182,51)" fg:x="15322749" fg:w="2065575"/><text x="39.3421%" y="335.50">lyronc..</text></g><g><title>&lt;lyronc::parser::ExprValue as core::clone::Clone&gt;::clone (1,052,706 samples, 2.69%)</title><rect x="41.6762%" y="309" width="2.6857%" height="15" fill="rgb(231,60,39)" fg:x="16335618" fg:w="1052706"/><text x="41.9262%" y="319.50">&lt;l..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="309" width="2.6006%" height="15" fill="rgb(208,69,12)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="319.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="293" width="2.6006%" height="15" fill="rgb(235,93,37)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="303.50">co..</text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="277" width="2.6006%" height="15" fill="rgb(213,116,39)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="287.50">&lt;s..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="261" width="2.6006%" height="15" fill="rgb(222,207,29)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="271.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::swap (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="245" width="2.6006%" height="15" fill="rgb(206,96,30)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="255.50">co..</text></g><g><title>core::sync::atomic::atomic_swap (1,019,332 samples, 2.60%)</title><rect x="44.3619%" y="229" width="2.6006%" height="15" fill="rgb(218,138,4)" fg:x="17388324" fg:w="1019332"/><text x="44.6119%" y="239.50">co..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,130,154 samples, 2.88%)</title><rect x="49.5301%" y="53" width="2.8833%" height="15" fill="rgb(250,191,14)" fg:x="19414054" fg:w="1130154"/><text x="49.7801%" y="63.50">al..</text></g><g><title>core::fmt::Formatter::write_formatted_parts (3,205,095 samples, 8.18%)</title><rect x="46.9625%" y="229" width="8.1770%" height="15" fill="rgb(239,60,40)" fg:x="18407656" fg:w="3205095"/><text x="47.2125%" y="239.50">core::fmt::..</text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="213" width="5.6094%" height="15" fill="rgb(206,27,48)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="223.50">core::f..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="197" width="5.6094%" height="15" fill="rgb(225,35,8)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="207.50">&lt;alloc:..</text></g><g><title>alloc::string::String::push_str (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="181" width="5.6094%" height="15" fill="rgb(250,213,24)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="191.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="165" width="5.6094%" height="15" fill="rgb(247,123,22)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="175.50">alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="149" width="5.6094%" height="15" fill="rgb(231,138,38)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="159.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="133" width="5.6094%" height="15" fill="rgb(231,145,46)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="143.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="117" width="5.6094%" height="15" fill="rgb(251,118,11)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="127.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="101" width="5.6094%" height="15" fill="rgb(217,147,25)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="111.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="85" width="5.6094%" height="15" fill="rgb(247,81,37)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="95.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,198,697 samples, 5.61%)</title><rect x="49.5301%" y="69" width="5.6094%" height="15" fill="rgb(209,12,38)" fg:x="19414054" fg:w="2198697"/><text x="49.7801%" y="79.50">alloc::..</text></g><g><title>alloc::raw_vec::finish_grow (1,068,543 samples, 2.73%)</title><rect x="52.4134%" y="53" width="2.7261%" height="15" fill="rgb(227,1,9)" fg:x="20544208" fg:w="1068543"/><text x="52.6634%" y="63.50">al..</text></g><g><title>malloc (1,068,543 samples, 2.73%)</title><rect x="52.4134%" y="37" width="2.7261%" height="15" fill="rgb(248,47,43)" fg:x="20544208" fg:w="1068543"/><text x="52.6634%" y="47.50">ma..</text></g><g><title>lyronc::codegen::&lt;impl core::convert::TryFrom&lt;lyronc::codegen::Value&gt; for alloc::string::String&gt;::try_from (5,558,061 samples, 14.18%)</title><rect x="46.9625%" y="309" width="14.1800%" height="15" fill="rgb(221,10,30)" fg:x="18407656" fg:w="5558061"/><text x="47.2125%" y="319.50">lyronc::codegen::&lt;impl..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5,558,061 samples, 14.18%)</title><rect x="46.9625%" y="293" width="14.1800%" height="15" fill="rgb(210,229,1)" fg:x="18407656" fg:w="5558061"/><text x="47.2125%" y="303.50">&lt;T as alloc::string::T..</text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (5,558,061 samples, 14.18%)</title><rect x="46.9625%" y="277" width="14.1800%" height="15" fill="rgb(222,148,37)" fg:x="18407656" fg:w="5558061"/><text x="47.2125%" y="287.50">core::fmt::float::&lt;imp..</text></g><g><title>core::fmt::float::float_to_decimal_display (5,558,061 samples, 14.18%)</title><rect x="46.9625%" y="261" width="14.1800%" height="15" fill="rgb(234,67,33)" fg:x="18407656" fg:w="5558061"/><text x="47.2125%" y="271.50">core::fmt::float::floa..</text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (5,558,061 samples, 14.18%)</title><rect x="46.9625%" y="245" width="14.1800%" height="15" fill="rgb(247,98,35)" fg:x="18407656" fg:w="5558061"/><text x="47.2125%" y="255.50">core::fmt::float::floa..</text></g><g><title>core::num::flt2dec::to_shortest_str (2,352,966 samples, 6.00%)</title><rect x="55.1395%" y="229" width="6.0030%" height="15" fill="rgb(247,138,52)" fg:x="21612751" fg:w="2352966"/><text x="55.3895%" y="239.50">core::nu..</text></g><g><title>core::ops::function::FnMut::call_mut (2,352,966 samples, 6.00%)</title><rect x="55.1395%" y="213" width="6.0030%" height="15" fill="rgb(213,79,30)" fg:x="21612751" fg:w="2352966"/><text x="55.3895%" y="223.50">core::op..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (2,352,966 samples, 6.00%)</title><rect x="55.1395%" y="197" width="6.0030%" height="15" fill="rgb(246,177,23)" fg:x="21612751" fg:w="2352966"/><text x="55.3895%" y="207.50">core::nu..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (1,303,213 samples, 3.32%)</title><rect x="57.8177%" y="181" width="3.3248%" height="15" fill="rgb(230,62,27)" fg:x="22662504" fg:w="1303213"/><text x="58.0677%" y="191.50">cor..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt::round_and_weed (1,303,213 samples, 3.32%)</title><rect x="57.8177%" y="165" width="3.3248%" height="15" fill="rgb(216,154,8)" fg:x="22662504" fg:w="1303213"/><text x="58.0677%" y="175.50">cor..</text></g><g><title>std::io::stdio::Stderr::lock (1,012,678 samples, 2.58%)</title><rect x="61.1425%" y="309" width="2.5836%" height="15" fill="rgb(244,35,45)" fg:x="23965717" fg:w="1012678"/><text x="61.3925%" y="319.50">st..</text></g><g><title>std::sync::reentrant_lock::ReentrantLock&lt;T&gt;::lock (1,012,678 samples, 2.58%)</title><rect x="61.1425%" y="293" width="2.5836%" height="15" fill="rgb(251,115,12)" fg:x="23965717" fg:w="1012678"/><text x="61.3925%" y="303.50">st..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1,012,678 samples, 2.58%)</title><rect x="61.1425%" y="277" width="2.5836%" height="15" fill="rgb(240,54,50)" fg:x="23965717" fg:w="1012678"/><text x="61.3925%" y="287.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1,012,678 samples, 2.58%)</title><rect x="61.1425%" y="261" width="2.5836%" height="15" fill="rgb(233,84,52)" fg:x="23965717" fg:w="1012678"/><text x="61.3925%" y="271.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,012,678 samples, 2.58%)</title><rect x="61.1425%" y="245" width="2.5836%" height="15" fill="rgb(207,117,47)" fg:x="23965717" fg:w="1012678"/><text x="61.3925%" y="255.50">co..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="213" width="2.7837%" height="15" fill="rgb(249,43,39)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="223.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="197" width="2.7837%" height="15" fill="rgb(209,38,44)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="207.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="181" width="2.7837%" height="15" fill="rgb(236,212,23)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="191.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="165" width="2.7837%" height="15" fill="rgb(242,79,21)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="175.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="149" width="2.7837%" height="15" fill="rgb(211,96,35)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="159.50">&lt;s..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="133" width="2.7837%" height="15" fill="rgb(253,215,40)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="143.50">st..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,091,131 samples, 2.78%)</title><rect x="70.0153%" y="117" width="2.7837%" height="15" fill="rgb(211,81,21)" fg:x="27443549" fg:w="1091131"/><text x="70.2653%" y="127.50">al..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,047,208 samples, 2.67%)</title><rect x="72.7990%" y="165" width="2.6717%" height="15" fill="rgb(208,190,38)" fg:x="28534680" fg:w="1047208"/><text x="73.0490%" y="175.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,047,208 samples, 2.67%)</title><rect x="72.7990%" y="149" width="2.6717%" height="15" fill="rgb(235,213,38)" fg:x="28534680" fg:w="1047208"/><text x="73.0490%" y="159.50">&lt;s..</text></g><g><title>core::slice::memchr::memrchr (1,047,208 samples, 2.67%)</title><rect x="72.7990%" y="133" width="2.6717%" height="15" fill="rgb(237,122,38)" fg:x="28534680" fg:w="1047208"/><text x="73.0490%" y="143.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1,047,208 samples, 2.67%)</title><rect x="72.7990%" y="117" width="2.6717%" height="15" fill="rgb(244,218,35)" fg:x="28534680" fg:w="1047208"/><text x="73.0490%" y="127.50">&lt;c..</text></g><g><title>core::slice::memchr::memrchr::_{{closure}} (1,047,208 samples, 2.67%)</title><rect x="72.7990%" y="101" width="2.6717%" height="15" fill="rgb(240,68,47)" fg:x="28534680" fg:w="1047208"/><text x="73.0490%" y="111.50">co..</text></g><g><title>lyronc::codegen::stdlib::print (13,205,787 samples, 33.69%)</title><rect x="44.3619%" y="325" width="33.6912%" height="15" fill="rgb(210,16,53)" fg:x="17388324" fg:w="13205787"/><text x="44.6119%" y="335.50">lyronc::codegen::stdlib::print</text></g><g><title>std::io::stdio::_print (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="309" width="14.3271%" height="15" fill="rgb(235,124,12)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="319.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="293" width="14.3271%" height="15" fill="rgb(224,169,11)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="303.50">std::io::stdio::print_..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="277" width="14.3271%" height="15" fill="rgb(250,166,2)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="287.50">&lt;std::io::stdio::Stdou..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="261" width="14.3271%" height="15" fill="rgb(242,216,29)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="271.50">&lt;&amp;std::io::stdio::Stdo..</text></g><g><title>std::io::Write::write_fmt (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="245" width="14.3271%" height="15" fill="rgb(230,116,27)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="255.50">std::io::Write::write_..</text></g><g><title>core::fmt::write (5,615,716 samples, 14.33%)</title><rect x="63.7261%" y="229" width="14.3271%" height="15" fill="rgb(228,99,48)" fg:x="24978395" fg:w="5615716"/><text x="63.9761%" y="239.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (2,059,431 samples, 5.25%)</title><rect x="72.7990%" y="213" width="5.2541%" height="15" fill="rgb(253,11,6)" fg:x="28534680" fg:w="2059431"/><text x="73.0490%" y="223.50">core::..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2,059,431 samples, 5.25%)</title><rect x="72.7990%" y="197" width="5.2541%" height="15" fill="rgb(247,143,39)" fg:x="28534680" fg:w="2059431"/><text x="73.0490%" y="207.50">&lt;std::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2,059,431 samples, 5.25%)</title><rect x="72.7990%" y="181" width="5.2541%" height="15" fill="rgb(236,97,10)" fg:x="28534680" fg:w="2059431"/><text x="73.0490%" y="191.50">&lt;std::..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="165" width="2.5824%" height="15" fill="rgb(233,208,19)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="175.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="149" width="2.5824%" height="15" fill="rgb(216,164,2)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="159.50">co..</text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="133" width="2.5824%" height="15" fill="rgb(220,129,5)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="143.50">&lt;c..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="117" width="2.5824%" height="15" fill="rgb(242,17,10)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="127.50">co..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="101" width="2.5824%" height="15" fill="rgb(242,107,0)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="111.50">co..</text></g><g><title>core::mem::replace (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="85" width="2.5824%" height="15" fill="rgb(251,28,31)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="95.50">co..</text></g><g><title>core::ptr::write (1,012,223 samples, 2.58%)</title><rect x="75.4707%" y="69" width="2.5824%" height="15" fill="rgb(233,223,10)" fg:x="29581888" fg:w="1012223"/><text x="75.7207%" y="79.50">co..</text></g><g><title>lyronc::codegen::uoe (1,058,657 samples, 2.70%)</title><rect x="78.0532%" y="325" width="2.7009%" height="15" fill="rgb(215,21,27)" fg:x="30594111" fg:w="1058657"/><text x="78.3032%" y="335.50">ly..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,193,473 samples, 5.60%)</title><rect x="80.7540%" y="325" width="5.5961%" height="15" fill="rgb(232,23,21)" fg:x="31652768" fg:w="2193473"/><text x="81.0040%" y="335.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,193,473 samples, 5.60%)</title><rect x="80.7540%" y="309" width="5.5961%" height="15" fill="rgb(244,5,23)" fg:x="31652768" fg:w="2193473"/><text x="81.0040%" y="319.50">hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,193,473 samples, 5.60%)</title><rect x="80.7540%" y="293" width="5.5961%" height="15" fill="rgb(226,81,46)" fg:x="31652768" fg:w="2193473"/><text x="81.0040%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="277" width="2.5762%" height="15" fill="rgb(247,70,30)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="287.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="261" width="2.5762%" height="15" fill="rgb(212,68,19)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="245" width="2.5762%" height="15" fill="rgb(240,187,13)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="255.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::load (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="229" width="2.5762%" height="15" fill="rgb(223,113,26)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="239.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="213" width="2.5762%" height="15" fill="rgb(206,192,2)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="223.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,009,791 samples, 2.58%)</title><rect x="83.7739%" y="197" width="2.5762%" height="15" fill="rgb(241,108,4)" fg:x="32836450" fg:w="1009791"/><text x="84.0239%" y="207.50">co..</text></g><g><title>cfree (1,018,806 samples, 2.60%)</title><rect x="86.3501%" y="309" width="2.5992%" height="15" fill="rgb(247,173,49)" fg:x="33846241" fg:w="1018806"/><text x="86.6001%" y="319.50">cf..</text></g><g><title>[libc.so.6] (1,018,806 samples, 2.60%)</title><rect x="86.3501%" y="293" width="2.5992%" height="15" fill="rgb(224,114,35)" fg:x="33846241" fg:w="1018806"/><text x="86.6001%" y="303.50">[l..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,045,739 samples, 2.67%)</title><rect x="88.9494%" y="261" width="2.6679%" height="15" fill="rgb(245,159,27)" fg:x="34865047" fg:w="1045739"/><text x="89.1994%" y="271.50">&lt;h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,045,739 samples, 2.67%)</title><rect x="88.9494%" y="245" width="2.6679%" height="15" fill="rgb(245,172,44)" fg:x="34865047" fg:w="1045739"/><text x="89.1994%" y="255.50">ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1,045,739 samples, 2.67%)</title><rect x="88.9494%" y="229" width="2.6679%" height="15" fill="rgb(236,23,11)" fg:x="34865047" fg:w="1045739"/><text x="89.1994%" y="239.50">ha..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1,045,739 samples, 2.67%)</title><rect x="88.9494%" y="213" width="2.6679%" height="15" fill="rgb(205,117,38)" fg:x="34865047" fg:w="1045739"/><text x="89.1994%" y="223.50">co..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="261" width="2.5751%" height="15" fill="rgb(237,72,25)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="271.50">ha..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="245" width="2.5751%" height="15" fill="rgb(244,70,9)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="255.50">ha..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="229" width="2.5751%" height="15" fill="rgb(217,125,39)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="239.50">&lt;Q..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="213" width="2.5751%" height="15" fill="rgb(235,36,10)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="223.50">co..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="197" width="2.5751%" height="15" fill="rgb(251,123,47)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="207.50">&lt;a..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="181" width="2.5751%" height="15" fill="rgb(221,13,13)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="191.50">al..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="165" width="2.5751%" height="15" fill="rgb(238,131,9)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="175.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,009,348 samples, 2.58%)</title><rect x="91.6173%" y="149" width="2.5751%" height="15" fill="rgb(211,50,8)" fg:x="35910786" fg:w="1009348"/><text x="91.8673%" y="159.50">&lt;[..</text></g><g><title>_start (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="661" width="80.9370%" height="15" fill="rgb(245,182,24)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="671.50">_start</text></g><g><title>__libc_start_main (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="645" width="80.9370%" height="15" fill="rgb(242,14,37)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="629" width="80.9370%" height="15" fill="rgb(246,228,12)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="639.50">[libc.so.6]</text></g><g><title>main (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="613" width="80.9370%" height="15" fill="rgb(213,55,15)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="597" width="80.9370%" height="15" fill="rgb(209,9,3)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="581" width="80.9370%" height="15" fill="rgb(230,59,30)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="565" width="80.9370%" height="15" fill="rgb(209,121,21)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="549" width="80.9370%" height="15" fill="rgb(220,109,13)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="533" width="80.9370%" height="15" fill="rgb(232,18,1)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="517" width="80.9370%" height="15" fill="rgb(215,41,42)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="501" width="80.9370%" height="15" fill="rgb(224,123,36)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="485" width="80.9370%" height="15" fill="rgb(240,125,3)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="469" width="80.9370%" height="15" fill="rgb(205,98,50)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="453" width="80.9370%" height="15" fill="rgb(205,185,37)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="437" width="80.9370%" height="15" fill="rgb(238,207,15)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="421" width="80.9370%" height="15" fill="rgb(213,199,42)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>lyronc::main (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="405" width="80.9370%" height="15" fill="rgb(235,201,11)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="415.50">lyronc::main</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="389" width="80.9370%" height="15" fill="rgb(207,46,11)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="399.50">lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="373" width="80.9370%" height="15" fill="rgb(241,35,35)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="383.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (31,724,463 samples, 80.94%)</title><rect x="16.2229%" y="357" width="80.9370%" height="15" fill="rgb(243,32,47)" fg:x="6358807" fg:w="31724463"/><text x="16.4729%" y="367.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (30,648,602 samples, 78.19%)</title><rect x="18.9677%" y="341" width="78.1922%" height="15" fill="rgb(247,202,23)" fg:x="7434668" fg:w="30648602"/><text x="19.2177%" y="351.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4,237,029 samples, 10.81%)</title><rect x="86.3501%" y="325" width="10.8097%" height="15" fill="rgb(219,102,11)" fg:x="33846241" fg:w="4237029"/><text x="86.6001%" y="335.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,218,223 samples, 8.21%)</title><rect x="88.9494%" y="309" width="8.2105%" height="15" fill="rgb(243,110,44)" fg:x="34865047" fg:w="3218223"/><text x="89.1994%" y="319.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3,218,223 samples, 8.21%)</title><rect x="88.9494%" y="293" width="8.2105%" height="15" fill="rgb(222,74,54)" fg:x="34865047" fg:w="3218223"/><text x="89.1994%" y="303.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3,218,223 samples, 8.21%)</title><rect x="88.9494%" y="277" width="8.2105%" height="15" fill="rgb(216,99,12)" fg:x="34865047" fg:w="3218223"/><text x="89.1994%" y="287.50">hashbrown::..</text></g><g><title>hashbrown::raw::sse2::Group::load (1,163,136 samples, 2.97%)</title><rect x="94.1924%" y="261" width="2.9674%" height="15" fill="rgb(226,22,26)" fg:x="36920134" fg:w="1163136"/><text x="94.4424%" y="271.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,163,136 samples, 2.97%)</title><rect x="94.1924%" y="245" width="2.9674%" height="15" fill="rgb(217,163,10)" fg:x="36920134" fg:w="1163136"/><text x="94.4424%" y="255.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,163,136 samples, 2.97%)</title><rect x="94.1924%" y="229" width="2.9674%" height="15" fill="rgb(213,25,53)" fg:x="36920134" fg:w="1163136"/><text x="94.4424%" y="239.50">cor..</text></g><g><title>all (39,196,509 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="39196509"/><text x="0.2500%" y="703.50"></text></g><g><title>lyronc (39,196,509 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="39196509"/><text x="0.2500%" y="687.50">lyronc</text></g><g><title>lyronc::main (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="661" width="2.8401%" height="15" fill="rgb(229,68,48)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="671.50">ly..</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="645" width="2.8401%" height="15" fill="rgb(252,8,32)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="655.50">ly..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="629" width="2.8401%" height="15" fill="rgb(223,20,43)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="639.50">ly..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="613" width="2.8401%" height="15" fill="rgb(229,81,49)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="623.50">ly..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="597" width="2.8401%" height="15" fill="rgb(236,28,36)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="607.50">ly..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="581" width="2.8401%" height="15" fill="rgb(249,185,26)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="591.50">ly..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="565" width="2.8401%" height="15" fill="rgb(249,174,33)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="575.50">ly..</text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (1,113,239 samples, 2.84%)</title><rect x="97.1599%" y="549" width="2.8401%" height="15" fill="rgb(233,201,37)" fg:x="38083270" fg:w="1113239"/><text x="97.4099%" y="559.50">&lt;l..</text></g></svg></svg>