<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="216912813"><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4,042,528 samples, 1.86%)</title><rect x="0.0000%" y="629" width="1.8637%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4042528"/><text x="0.2500%" y="639.50">&lt;..</text></g><g><title>alloc::string::String::push_str (1,357,800 samples, 0.63%)</title><rect x="1.2377%" y="613" width="0.6260%" height="15" fill="rgb(217,0,24)" fg:x="2684728" fg:w="1357800"/><text x="1.4877%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,357,800 samples, 0.63%)</title><rect x="1.2377%" y="597" width="0.6260%" height="15" fill="rgb(221,193,54)" fg:x="2684728" fg:w="1357800"/><text x="1.4877%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,357,800 samples, 0.63%)</title><rect x="1.2377%" y="581" width="0.6260%" height="15" fill="rgb(248,212,6)" fg:x="2684728" fg:w="1357800"/><text x="1.4877%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,357,800 samples, 0.63%)</title><rect x="1.2377%" y="565" width="0.6260%" height="15" fill="rgb(208,68,35)" fg:x="2684728" fg:w="1357800"/><text x="1.4877%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,357,800 samples, 0.63%)</title><rect x="1.2377%" y="549" width="0.6260%" height="15" fill="rgb(232,128,0)" fg:x="2684728" fg:w="1357800"/><text x="1.4877%" y="559.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (2,727,148 samples, 1.26%)</title><rect x="1.8637%" y="629" width="1.2573%" height="15" fill="rgb(207,160,47)" fg:x="4042528" fg:w="2727148"/><text x="2.1137%" y="639.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::fmt::Display&gt;::fmt (1,388,131 samples, 0.64%)</title><rect x="3.1209%" y="629" width="0.6399%" height="15" fill="rgb(228,23,34)" fg:x="6769676" fg:w="1388131"/><text x="3.3709%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,969,719 samples, 1.83%)</title><rect x="3.7609%" y="613" width="1.8301%" height="15" fill="rgb(218,30,26)" fg:x="8157807" fg:w="3969719"/><text x="4.0109%" y="623.50">&lt;..</text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (2,766,615 samples, 1.28%)</title><rect x="5.5910%" y="613" width="1.2755%" height="15" fill="rgb(220,122,19)" fg:x="12127526" fg:w="2766615"/><text x="5.8410%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="597" width="0.6547%" height="15" fill="rgb(250,228,42)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="581" width="0.6547%" height="15" fill="rgb(240,193,28)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="565" width="0.6547%" height="15" fill="rgb(216,20,37)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="549" width="0.6547%" height="15" fill="rgb(206,188,39)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="533" width="0.6547%" height="15" fill="rgb(217,207,13)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="517" width="0.6547%" height="15" fill="rgb(231,73,38)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="501" width="0.6547%" height="15" fill="rgb(225,20,46)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="485" width="0.6547%" height="15" fill="rgb(210,31,41)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="469" width="0.6547%" height="15" fill="rgb(221,200,47)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="453" width="0.6547%" height="15" fill="rgb(226,26,5)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="437" width="0.6547%" height="15" fill="rgb(249,33,26)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="447.50"></text></g><g><title>__rdl_alloc (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="421" width="0.6547%" height="15" fill="rgb(235,183,28)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="431.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,420,120 samples, 0.65%)</title><rect x="6.2117%" y="405" width="0.6547%" height="15" fill="rgb(221,5,38)" fg:x="13474021" fg:w="1420120"/><text x="6.4617%" y="415.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::fmt::Display&gt;::fmt (1,394,397 samples, 0.64%)</title><rect x="6.8664%" y="613" width="0.6428%" height="15" fill="rgb(247,18,42)" fg:x="14894141" fg:w="1394397"/><text x="7.1164%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,416,798 samples, 0.65%)</title><rect x="7.5093%" y="613" width="0.6532%" height="15" fill="rgb(241,131,45)" fg:x="16288538" fg:w="1416798"/><text x="7.7593%" y="623.50"></text></g><g><title>[libc.so.6] (1,286,874 samples, 0.59%)</title><rect x="8.1624%" y="613" width="0.5933%" height="15" fill="rgb(249,31,29)" fg:x="17705336" fg:w="1286874"/><text x="8.4124%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,226,909 samples, 0.57%)</title><rect x="8.7557%" y="613" width="0.5656%" height="15" fill="rgb(225,111,53)" fg:x="18992210" fg:w="1226909"/><text x="9.0057%" y="623.50"></text></g><g><title>cfree (1,304,835 samples, 0.60%)</title><rect x="9.3213%" y="613" width="0.6015%" height="15" fill="rgb(238,160,17)" fg:x="20219119" fg:w="1304835"/><text x="9.5713%" y="623.50"></text></g><g><title>core::fmt::write (1,382,917 samples, 0.64%)</title><rect x="9.9229%" y="613" width="0.6375%" height="15" fill="rgb(214,148,48)" fg:x="21523954" fg:w="1382917"/><text x="10.1729%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (6,520,566 samples, 3.01%)</title><rect x="10.5604%" y="613" width="3.0061%" height="15" fill="rgb(232,36,49)" fg:x="22906871" fg:w="6520566"/><text x="10.8104%" y="623.50">cor..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="613" width="0.6049%" height="15" fill="rgb(209,103,24)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="597" width="0.6049%" height="15" fill="rgb(229,88,8)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="581" width="0.6049%" height="15" fill="rgb(213,181,19)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="565" width="0.6049%" height="15" fill="rgb(254,191,54)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="575.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="549" width="0.6049%" height="15" fill="rgb(241,83,37)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="559.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="533" width="0.6049%" height="15" fill="rgb(233,36,39)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="517" width="0.6049%" height="15" fill="rgb(226,3,54)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="501" width="0.6049%" height="15" fill="rgb(245,192,40)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="511.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="485" width="0.6049%" height="15" fill="rgb(238,167,29)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="469" width="0.6049%" height="15" fill="rgb(232,182,51)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,312,054 samples, 0.60%)</title><rect x="13.5665%" y="453" width="0.6049%" height="15" fill="rgb(231,60,39)" fg:x="29427437" fg:w="1312054"/><text x="13.8165%" y="463.50"></text></g><g><title>malloc (1,401,160 samples, 0.65%)</title><rect x="14.1714%" y="613" width="0.6460%" height="15" fill="rgb(208,69,12)" fg:x="30739491" fg:w="1401160"/><text x="14.4214%" y="623.50"></text></g><g><title>[[stack]] (25,276,032 samples, 11.65%)</title><rect x="3.7609%" y="629" width="11.6526%" height="15" fill="rgb(235,93,37)" fg:x="8157807" fg:w="25276032"/><text x="4.0109%" y="639.50">[[stack]]</text></g><g><title>std::io::stdio::_print (1,293,188 samples, 0.60%)</title><rect x="14.8173%" y="613" width="0.5962%" height="15" fill="rgb(213,116,39)" fg:x="32140651" fg:w="1293188"/><text x="15.0673%" y="623.50"></text></g><g><title>[libc.so.6] (1,318,112 samples, 0.61%)</title><rect x="15.4135%" y="613" width="0.6077%" height="15" fill="rgb(222,207,29)" fg:x="33433839" fg:w="1318112"/><text x="15.6635%" y="623.50"></text></g><g><title>[anon] (2,639,080 samples, 1.22%)</title><rect x="15.4135%" y="629" width="1.2167%" height="15" fill="rgb(206,96,30)" fg:x="33433839" fg:w="2639080"/><text x="15.6635%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="613" width="0.6090%" height="15" fill="rgb(218,138,4)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="597" width="0.6090%" height="15" fill="rgb(250,191,14)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="581" width="0.6090%" height="15" fill="rgb(239,60,40)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="565" width="0.6090%" height="15" fill="rgb(206,27,48)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="549" width="0.6090%" height="15" fill="rgb(225,35,8)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="533" width="0.6090%" height="15" fill="rgb(250,213,24)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="517" width="0.6090%" height="15" fill="rgb(247,123,22)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="527.50"></text></g><g><title>__rdl_dealloc (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="501" width="0.6090%" height="15" fill="rgb(231,138,38)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="511.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,320,968 samples, 0.61%)</title><rect x="16.0212%" y="485" width="0.6090%" height="15" fill="rgb(231,145,46)" fg:x="34751951" fg:w="1320968"/><text x="16.2712%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,243,485 samples, 0.57%)</title><rect x="16.6301%" y="629" width="0.5733%" height="15" fill="rgb(251,118,11)" fg:x="36072919" fg:w="1243485"/><text x="16.8801%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,232,191 samples, 0.57%)</title><rect x="16.6354%" y="613" width="0.5681%" height="15" fill="rgb(217,147,25)" fg:x="36084213" fg:w="1232191"/><text x="16.8854%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,232,191 samples, 0.57%)</title><rect x="16.6354%" y="597" width="0.5681%" height="15" fill="rgb(247,81,37)" fg:x="36084213" fg:w="1232191"/><text x="16.8854%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,232,191 samples, 0.57%)</title><rect x="16.6354%" y="581" width="0.5681%" height="15" fill="rgb(209,12,38)" fg:x="36084213" fg:w="1232191"/><text x="16.8854%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,077,802 samples, 0.50%)</title><rect x="16.7065%" y="565" width="0.4969%" height="15" fill="rgb(227,1,9)" fg:x="36238602" fg:w="1077802"/><text x="16.9565%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,077,802 samples, 0.50%)</title><rect x="16.7065%" y="549" width="0.4969%" height="15" fill="rgb(248,47,43)" fg:x="36238602" fg:w="1077802"/><text x="16.9565%" y="559.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (1,304,796 samples, 0.60%)</title><rect x="17.2034%" y="613" width="0.6015%" height="15" fill="rgb(221,10,30)" fg:x="37316404" fg:w="1304796"/><text x="17.4534%" y="623.50"></text></g><g><title>[libc.so.6] (2,665,456 samples, 1.23%)</title><rect x="17.8049%" y="613" width="1.2288%" height="15" fill="rgb(210,229,1)" fg:x="38621200" fg:w="2665456"/><text x="18.0549%" y="623.50"></text></g><g><title>[unknown] (5,347,328 samples, 2.47%)</title><rect x="17.2034%" y="629" width="2.4652%" height="15" fill="rgb(222,148,37)" fg:x="37316404" fg:w="5347328"/><text x="17.4534%" y="639.50">[u..</text></g><g><title>_fini (1,377,076 samples, 0.63%)</title><rect x="19.0338%" y="613" width="0.6349%" height="15" fill="rgb(234,67,33)" fg:x="41286656" fg:w="1377076"/><text x="19.2838%" y="623.50"></text></g><g><title>[libc.so.6] (1,377,076 samples, 0.63%)</title><rect x="19.0338%" y="597" width="0.6349%" height="15" fill="rgb(247,98,35)" fg:x="41286656" fg:w="1377076"/><text x="19.2838%" y="607.50"></text></g><g><title>core::fmt::Formatter::new (4,172,139 samples, 1.92%)</title><rect x="25.7705%" y="261" width="1.9234%" height="15" fill="rgb(247,138,52)" fg:x="55899492" fg:w="4172139"/><text x="26.0205%" y="271.50">c..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1,262,554 samples, 0.58%)</title><rect x="28.3291%" y="245" width="0.5821%" height="15" fill="rgb(213,79,30)" fg:x="61449467" fg:w="1262554"/><text x="28.5791%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,236,418 samples, 0.57%)</title><rect x="29.5135%" y="101" width="0.5700%" height="15" fill="rgb(246,177,23)" fg:x="64018644" fg:w="1236418"/><text x="29.7635%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1,326,109 samples, 0.61%)</title><rect x="30.0835%" y="101" width="0.6114%" height="15" fill="rgb(230,62,27)" fg:x="65255062" fg:w="1326109"/><text x="30.3335%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,345,407 samples, 2.46%)</title><rect x="30.6949%" y="101" width="2.4643%" height="15" fill="rgb(216,154,8)" fg:x="66581171" fg:w="5345407"/><text x="30.9449%" y="111.50">al..</text></g><g><title>malloc (5,345,407 samples, 2.46%)</title><rect x="30.6949%" y="85" width="2.4643%" height="15" fill="rgb(244,35,45)" fg:x="66581171" fg:w="5345407"/><text x="30.9449%" y="95.50">ma..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10,425,748 samples, 4.81%)</title><rect x="28.9112%" y="165" width="4.8064%" height="15" fill="rgb(251,115,12)" fg:x="62712021" fg:w="10425748"/><text x="29.1612%" y="175.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10,425,748 samples, 4.81%)</title><rect x="28.9112%" y="149" width="4.8064%" height="15" fill="rgb(240,54,50)" fg:x="62712021" fg:w="10425748"/><text x="29.1612%" y="159.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9,119,125 samples, 4.20%)</title><rect x="29.5135%" y="133" width="4.2041%" height="15" fill="rgb(233,84,52)" fg:x="64018644" fg:w="9119125"/><text x="29.7635%" y="143.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9,119,125 samples, 4.20%)</title><rect x="29.5135%" y="117" width="4.2041%" height="15" fill="rgb(207,117,47)" fg:x="64018644" fg:w="9119125"/><text x="29.7635%" y="127.50">alloc..</text></g><g><title>core::alloc::layout::Layout::array (1,211,191 samples, 0.56%)</title><rect x="33.1592%" y="101" width="0.5584%" height="15" fill="rgb(249,43,39)" fg:x="71926578" fg:w="1211191"/><text x="33.4092%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1,211,191 samples, 0.56%)</title><rect x="33.1592%" y="85" width="0.5584%" height="15" fill="rgb(209,38,44)" fg:x="71926578" fg:w="1211191"/><text x="33.4092%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (17,167,379 samples, 7.91%)</title><rect x="28.9112%" y="245" width="7.9144%" height="15" fill="rgb(236,212,23)" fg:x="62712021" fg:w="17167379"/><text x="29.1612%" y="255.50">&lt;alloc::str..</text></g><g><title>alloc::string::String::push_str (17,167,379 samples, 7.91%)</title><rect x="28.9112%" y="229" width="7.9144%" height="15" fill="rgb(242,79,21)" fg:x="62712021" fg:w="17167379"/><text x="29.1612%" y="239.50">alloc::stri..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17,167,379 samples, 7.91%)</title><rect x="28.9112%" y="213" width="7.9144%" height="15" fill="rgb(211,96,35)" fg:x="62712021" fg:w="17167379"/><text x="29.1612%" y="223.50">alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17,167,379 samples, 7.91%)</title><rect x="28.9112%" y="197" width="7.9144%" height="15" fill="rgb(253,215,40)" fg:x="62712021" fg:w="17167379"/><text x="29.1612%" y="207.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17,167,379 samples, 7.91%)</title><rect x="28.9112%" y="181" width="7.9144%" height="15" fill="rgb(211,81,21)" fg:x="62712021" fg:w="17167379"/><text x="29.1612%" y="191.50">alloc::vec:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6,741,631 samples, 3.11%)</title><rect x="33.7176%" y="165" width="3.1080%" height="15" fill="rgb(208,190,38)" fg:x="73137769" fg:w="6741631"/><text x="33.9676%" y="175.50">cor..</text></g><g><title>[libc.so.6] (6,741,631 samples, 3.11%)</title><rect x="33.7176%" y="149" width="3.1080%" height="15" fill="rgb(235,213,38)" fg:x="73137769" fg:w="6741631"/><text x="33.9676%" y="159.50">[li..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (30,628,833 samples, 14.12%)</title><rect x="23.9839%" y="325" width="14.1203%" height="15" fill="rgb(237,122,38)" fg:x="52024181" fg:w="30628833"/><text x="24.2339%" y="335.50">&lt;T as alloc::string::..</text></g><g><title>&lt;lyronc::codegen::Value as core::fmt::Display&gt;::fmt (29,274,669 samples, 13.50%)</title><rect x="24.6082%" y="309" width="13.4961%" height="15" fill="rgb(244,218,35)" fg:x="53378345" fg:w="29274669"/><text x="24.8582%" y="319.50">&lt;lyronc::codegen::Va..</text></g><g><title>core::fmt::Formatter::write_fmt (27,975,701 samples, 12.90%)</title><rect x="25.2070%" y="293" width="12.8972%" height="15" fill="rgb(240,68,47)" fg:x="54677313" fg:w="27975701"/><text x="25.4570%" y="303.50">core::fmt::Formatte..</text></g><g><title>core::fmt::write (27,975,701 samples, 12.90%)</title><rect x="25.2070%" y="277" width="12.8972%" height="15" fill="rgb(210,16,53)" fg:x="54677313" fg:w="27975701"/><text x="25.4570%" y="287.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (22,581,383 samples, 10.41%)</title><rect x="27.6939%" y="261" width="10.4103%" height="15" fill="rgb(235,124,12)" fg:x="60071631" fg:w="22581383"/><text x="27.9439%" y="271.50">core::fmt::rt::..</text></g><g><title>core::fmt::Formatter::pad (2,773,614 samples, 1.28%)</title><rect x="36.8256%" y="245" width="1.2787%" height="15" fill="rgb(224,169,11)" fg:x="79879400" fg:w="2773614"/><text x="37.0756%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1,423,171 samples, 0.66%)</title><rect x="37.4482%" y="229" width="0.6561%" height="15" fill="rgb(250,166,2)" fg:x="81229843" fg:w="1423171"/><text x="37.6982%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1,423,171 samples, 0.66%)</title><rect x="37.4482%" y="213" width="0.6561%" height="15" fill="rgb(242,216,29)" fg:x="81229843" fg:w="1423171"/><text x="37.6982%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="213" width="1.2461%" height="15" fill="rgb(230,116,27)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="197" width="1.2461%" height="15" fill="rgb(228,99,48)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="181" width="1.2461%" height="15" fill="rgb(253,11,6)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="165" width="1.2461%" height="15" fill="rgb(247,143,39)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="149" width="1.2461%" height="15" fill="rgb(236,97,10)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="133" width="1.2461%" height="15" fill="rgb(233,208,19)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="143.50"></text></g><g><title>__rdl_alloc (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="117" width="1.2461%" height="15" fill="rgb(216,164,2)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="127.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="101" width="1.2461%" height="15" fill="rgb(220,129,5)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="111.50"></text></g><g><title>malloc (2,702,941 samples, 1.25%)</title><rect x="38.1043%" y="85" width="1.2461%" height="15" fill="rgb(242,17,10)" fg:x="82653014" fg:w="2702941"/><text x="38.3543%" y="95.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="325" width="2.4677%" height="15" fill="rgb(242,107,0)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="335.50">&lt;a..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="309" width="2.4677%" height="15" fill="rgb(251,28,31)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="319.50">&lt;T..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="293" width="2.4677%" height="15" fill="rgb(233,223,10)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="303.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="277" width="2.4677%" height="15" fill="rgb(215,21,27)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="287.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="261" width="2.4677%" height="15" fill="rgb(232,23,21)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="271.50">al..</text></g><g><title>alloc::slice::hack::to_vec (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="245" width="2.4677%" height="15" fill="rgb(244,5,23)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="255.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,352,709 samples, 2.47%)</title><rect x="38.1043%" y="229" width="2.4677%" height="15" fill="rgb(226,81,46)" fg:x="82653014" fg:w="5352709"/><text x="38.3543%" y="239.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,649,768 samples, 1.22%)</title><rect x="39.3504%" y="213" width="1.2216%" height="15" fill="rgb(247,70,30)" fg:x="85355955" fg:w="2649768"/><text x="39.6004%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,649,768 samples, 1.22%)</title><rect x="39.3504%" y="197" width="1.2216%" height="15" fill="rgb(212,68,19)" fg:x="85355955" fg:w="2649768"/><text x="39.6004%" y="207.50"></text></g><g><title>[libc.so.6] (2,649,768 samples, 1.22%)</title><rect x="39.3504%" y="181" width="1.2216%" height="15" fill="rgb(240,187,13)" fg:x="85355955" fg:w="2649768"/><text x="39.6004%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="325" width="0.5954%" height="15" fill="rgb(223,113,26)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="309" width="0.5954%" height="15" fill="rgb(206,192,2)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="293" width="0.5954%" height="15" fill="rgb(241,108,4)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="277" width="0.5954%" height="15" fill="rgb(247,173,49)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="261" width="0.5954%" height="15" fill="rgb(224,114,35)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="245" width="0.5954%" height="15" fill="rgb(245,159,27)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="229" width="0.5954%" height="15" fill="rgb(245,172,44)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="213" width="0.5954%" height="15" fill="rgb(236,23,11)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="197" width="0.5954%" height="15" fill="rgb(205,117,38)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="181" width="0.5954%" height="15" fill="rgb(237,72,25)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="165" width="0.5954%" height="15" fill="rgb(244,70,9)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="175.50"></text></g><g><title>[libc.so.6] (1,291,570 samples, 0.60%)</title><rect x="40.5719%" y="149" width="0.5954%" height="15" fill="rgb(217,125,39)" fg:x="88005723" fg:w="1291570"/><text x="40.8219%" y="159.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (4,044,638 samples, 1.86%)</title><rect x="41.1674%" y="325" width="1.8646%" height="15" fill="rgb(235,36,10)" fg:x="89297293" fg:w="4044638"/><text x="41.4174%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,623,302 samples, 1.21%)</title><rect x="41.8226%" y="309" width="1.2094%" height="15" fill="rgb(251,123,47)" fg:x="90718629" fg:w="2623302"/><text x="42.0726%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="293" width="0.5797%" height="15" fill="rgb(221,13,13)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="277" width="0.5797%" height="15" fill="rgb(238,131,9)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="261" width="0.5797%" height="15" fill="rgb(211,50,8)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="245" width="0.5797%" height="15" fill="rgb(245,182,24)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="229" width="0.5797%" height="15" fill="rgb(242,14,37)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="213" width="0.5797%" height="15" fill="rgb(246,228,12)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="197" width="0.5797%" height="15" fill="rgb(213,55,15)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="181" width="0.5797%" height="15" fill="rgb(209,9,3)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="165" width="0.5797%" height="15" fill="rgb(230,59,30)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="149" width="0.5797%" height="15" fill="rgb(209,121,21)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="159.50"></text></g><g><title>__rdl_alloc (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="133" width="0.5797%" height="15" fill="rgb(220,109,13)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="117" width="0.5797%" height="15" fill="rgb(232,18,1)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="127.50"></text></g><g><title>malloc (1,257,338 samples, 0.58%)</title><rect x="42.4524%" y="101" width="0.5797%" height="15" fill="rgb(215,41,42)" fg:x="92084593" fg:w="1257338"/><text x="42.7024%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,336,028 samples, 0.62%)</title><rect x="43.0320%" y="325" width="0.6159%" height="15" fill="rgb(224,123,36)" fg:x="93341931" fg:w="1336028"/><text x="43.2820%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2,744,411 samples, 1.27%)</title><rect x="43.6479%" y="261" width="1.2652%" height="15" fill="rgb(240,125,3)" fg:x="94677959" fg:w="2744411"/><text x="43.8979%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,165,022 samples, 1.92%)</title><rect x="43.6479%" y="309" width="1.9201%" height="15" fill="rgb(205,98,50)" fg:x="94677959" fg:w="4165022"/><text x="43.8979%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4,165,022 samples, 1.92%)</title><rect x="43.6479%" y="293" width="1.9201%" height="15" fill="rgb(205,185,37)" fg:x="94677959" fg:w="4165022"/><text x="43.8979%" y="303.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (4,165,022 samples, 1.92%)</title><rect x="43.6479%" y="277" width="1.9201%" height="15" fill="rgb(238,207,15)" fg:x="94677959" fg:w="4165022"/><text x="43.8979%" y="287.50">a..</text></g><g><title>malloc (1,420,611 samples, 0.65%)</title><rect x="44.9131%" y="261" width="0.6549%" height="15" fill="rgb(213,199,42)" fg:x="97422370" fg:w="1420611"/><text x="45.1631%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,313,280 samples, 0.61%)</title><rect x="45.5681%" y="309" width="0.6054%" height="15" fill="rgb(235,201,11)" fg:x="98842981" fg:w="1313280"/><text x="45.8181%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,313,280 samples, 0.61%)</title><rect x="45.5681%" y="293" width="0.6054%" height="15" fill="rgb(207,46,11)" fg:x="98842981" fg:w="1313280"/><text x="45.8181%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12,379,468 samples, 5.71%)</title><rect x="43.6479%" y="325" width="5.7071%" height="15" fill="rgb(241,35,35)" fg:x="94677959" fg:w="12379468"/><text x="43.8979%" y="335.50">alloc::..</text></g><g><title>core::ptr::write (6,901,166 samples, 3.18%)</title><rect x="46.1735%" y="309" width="3.1815%" height="15" fill="rgb(243,32,47)" fg:x="100156261" fg:w="6901166"/><text x="46.4235%" y="319.50">cor..</text></g><g><title>cfree (6,759,102 samples, 3.12%)</title><rect x="49.3550%" y="325" width="3.1160%" height="15" fill="rgb(247,202,23)" fg:x="107057427" fg:w="6759102"/><text x="49.6050%" y="335.50">cfr..</text></g><g><title>[libc.so.6] (6,759,102 samples, 3.12%)</title><rect x="49.3550%" y="309" width="3.1160%" height="15" fill="rgb(219,102,11)" fg:x="107057427" fg:w="6759102"/><text x="49.6050%" y="319.50">[li..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,771,545 samples, 4.50%)</title><rect x="52.4711%" y="261" width="4.5048%" height="15" fill="rgb(243,110,44)" fg:x="113816529" fg:w="9771545"/><text x="52.7211%" y="271.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (9,771,545 samples, 4.50%)</title><rect x="52.4711%" y="245" width="4.5048%" height="15" fill="rgb(222,74,54)" fg:x="113816529" fg:w="9771545"/><text x="52.7211%" y="255.50">alloc..</text></g><g><title>__rdl_dealloc (9,771,545 samples, 4.50%)</title><rect x="52.4711%" y="229" width="4.5048%" height="15" fill="rgb(216,99,12)" fg:x="113816529" fg:w="9771545"/><text x="52.7211%" y="239.50">__rdl..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,771,545 samples, 4.50%)</title><rect x="52.4711%" y="213" width="4.5048%" height="15" fill="rgb(226,22,26)" fg:x="113816529" fg:w="9771545"/><text x="52.7211%" y="223.50">std::..</text></g><g><title>cfree (9,771,545 samples, 4.50%)</title><rect x="52.4711%" y="197" width="4.5048%" height="15" fill="rgb(217,163,10)" fg:x="113816529" fg:w="9771545"/><text x="52.7211%" y="207.50">cfree</text></g><g><title>[libc.so.6] (6,951,018 samples, 3.20%)</title><rect x="53.7714%" y="181" width="3.2045%" height="15" fill="rgb(213,25,53)" fg:x="116637056" fg:w="6951018"/><text x="54.0214%" y="191.50">[li..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (12,566,857 samples, 5.79%)</title><rect x="52.4711%" y="325" width="5.7935%" height="15" fill="rgb(252,105,26)" fg:x="113816529" fg:w="12566857"/><text x="52.7211%" y="335.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12,566,857 samples, 5.79%)</title><rect x="52.4711%" y="309" width="5.7935%" height="15" fill="rgb(220,39,43)" fg:x="113816529" fg:w="12566857"/><text x="52.7211%" y="319.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12,566,857 samples, 5.79%)</title><rect x="52.4711%" y="293" width="5.7935%" height="15" fill="rgb(229,68,48)" fg:x="113816529" fg:w="12566857"/><text x="52.7211%" y="303.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,566,857 samples, 5.79%)</title><rect x="52.4711%" y="277" width="5.7935%" height="15" fill="rgb(252,8,32)" fg:x="113816529" fg:w="12566857"/><text x="52.7211%" y="287.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2,795,312 samples, 1.29%)</title><rect x="56.9759%" y="261" width="1.2887%" height="15" fill="rgb(223,20,43)" fg:x="123588074" fg:w="2795312"/><text x="57.2259%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::string::String&gt;&gt; (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="325" width="0.6083%" height="15" fill="rgb(229,81,49)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="309" width="0.6083%" height="15" fill="rgb(236,28,36)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="319.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="293" width="0.6083%" height="15" fill="rgb(249,185,26)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="277" width="0.6083%" height="15" fill="rgb(249,174,33)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="287.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="261" width="0.6083%" height="15" fill="rgb(233,201,37)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="245" width="0.6083%" height="15" fill="rgb(221,78,26)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="229" width="0.6083%" height="15" fill="rgb(250,127,30)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1,319,417 samples, 0.61%)</title><rect x="58.2646%" y="213" width="0.6083%" height="15" fill="rgb(230,49,44)" fg:x="126383386" fg:w="1319417"/><text x="58.5146%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (1,271,750 samples, 0.59%)</title><rect x="58.8729%" y="325" width="0.5863%" height="15" fill="rgb(229,67,23)" fg:x="127702803" fg:w="1271750"/><text x="59.1229%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_mut_ptr_range (1,306,566 samples, 0.60%)</title><rect x="59.4592%" y="309" width="0.6023%" height="15" fill="rgb(249,83,47)" fg:x="128974553" fg:w="1306566"/><text x="59.7092%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,306,566 samples, 0.60%)</title><rect x="59.4592%" y="293" width="0.6023%" height="15" fill="rgb(215,43,3)" fg:x="128974553" fg:w="1306566"/><text x="59.7092%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (2,710,686 samples, 1.25%)</title><rect x="59.4592%" y="325" width="1.2497%" height="15" fill="rgb(238,154,13)" fg:x="128974553" fg:w="2710686"/><text x="59.7092%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="309" width="0.6473%" height="15" fill="rgb(219,56,2)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="319.50"></text></g><g><title>core::mem::swap (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="293" width="0.6473%" height="15" fill="rgb(233,0,4)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="303.50"></text></g><g><title>core::intrinsics::typed_swap (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="277" width="0.6473%" height="15" fill="rgb(235,30,7)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="261" width="0.6473%" height="15" fill="rgb(250,79,13)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="245" width="0.6473%" height="15" fill="rgb(211,146,34)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="255.50"></text></g><g><title>core::ptr::read (1,404,120 samples, 0.65%)</title><rect x="60.0615%" y="229" width="0.6473%" height="15" fill="rgb(228,22,38)" fg:x="130281119" fg:w="1404120"/><text x="60.3115%" y="239.50"></text></g><g><title>lyronc::codegen::&lt;impl core::convert::TryFrom&lt;lyronc::codegen::Value&gt; for f64&gt;::try_from (1,375,376 samples, 0.63%)</title><rect x="60.7088%" y="325" width="0.6341%" height="15" fill="rgb(235,168,5)" fg:x="131685239" fg:w="1375376"/><text x="60.9588%" y="335.50"></text></g><g><title>lyronc::codegen::program::VM::pop (2,732,444 samples, 1.26%)</title><rect x="61.3429%" y="325" width="1.2597%" height="15" fill="rgb(221,155,16)" fg:x="133060615" fg:w="2732444"/><text x="61.5929%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2,732,444 samples, 1.26%)</title><rect x="61.3429%" y="309" width="1.2597%" height="15" fill="rgb(215,215,53)" fg:x="133060615" fg:w="2732444"/><text x="61.5929%" y="319.50"></text></g><g><title>core::ptr::read (1,355,386 samples, 0.62%)</title><rect x="61.9777%" y="293" width="0.6249%" height="15" fill="rgb(223,4,10)" fg:x="134437673" fg:w="1355386"/><text x="62.2277%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;lyronc::codegen::Value&gt;&gt; (4,123,873 samples, 1.90%)</title><rect x="64.4710%" y="309" width="1.9012%" height="15" fill="rgb(234,103,6)" fg:x="139845890" fg:w="4123873"/><text x="64.7210%" y="319.50">c..</text></g><g><title>cfree (4,123,873 samples, 1.90%)</title><rect x="64.4710%" y="293" width="1.9012%" height="15" fill="rgb(227,97,0)" fg:x="139845890" fg:w="4123873"/><text x="64.7210%" y="303.50">c..</text></g><g><title>[libc.so.6] (1,430,728 samples, 0.66%)</title><rect x="65.7126%" y="277" width="0.6596%" height="15" fill="rgb(234,150,53)" fg:x="142539035" fg:w="1430728"/><text x="65.9626%" y="287.50"></text></g><g><title>core::fmt::Formatter::new (1,305,525 samples, 0.60%)</title><rect x="66.3722%" y="277" width="0.6019%" height="15" fill="rgb(228,201,54)" fg:x="143969763" fg:w="1305525"/><text x="66.6222%" y="287.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="229" width="1.2283%" height="15" fill="rgb(222,22,37)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="213" width="1.2283%" height="15" fill="rgb(237,53,32)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="197" width="1.2283%" height="15" fill="rgb(233,25,53)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="207.50"></text></g><g><title>alloc::string::String::push_str (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="181" width="1.2283%" height="15" fill="rgb(210,40,34)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="165" width="1.2283%" height="15" fill="rgb(241,220,44)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="149" width="1.2283%" height="15" fill="rgb(235,28,35)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="133" width="1.2283%" height="15" fill="rgb(210,56,17)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="117" width="1.2283%" height="15" fill="rgb(224,130,29)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="101" width="1.2283%" height="15" fill="rgb(235,212,8)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="85" width="1.2283%" height="15" fill="rgb(223,33,50)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="69" width="1.2283%" height="15" fill="rgb(219,149,13)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="53" width="1.2283%" height="15" fill="rgb(250,156,29)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="63.50"></text></g><g><title>malloc (2,664,353 samples, 1.23%)</title><rect x="66.9740%" y="37" width="1.2283%" height="15" fill="rgb(216,193,19)" fg:x="145275288" fg:w="2664353"/><text x="67.2240%" y="47.50"></text></g><g><title>core::num::flt2dec::determine_sign (1,327,413 samples, 0.61%)</title><rect x="68.2024%" y="213" width="0.6120%" height="15" fill="rgb(216,135,14)" fg:x="147939641" fg:w="1327413"/><text x="68.4524%" y="223.50"></text></g><g><title>core::num::diy_float::Fp::mul (2,655,677 samples, 1.22%)</title><rect x="68.8143%" y="165" width="1.2243%" height="15" fill="rgb(241,47,5)" fg:x="149267054" fg:w="2655677"/><text x="69.0643%" y="175.50"></text></g><g><title>lyronc::codegen::&lt;impl core::convert::TryFrom&lt;lyronc::codegen::Value&gt; for alloc::string::String&gt;::try_from (9,312,978 samples, 4.29%)</title><rect x="66.3722%" y="309" width="4.2934%" height="15" fill="rgb(233,42,35)" fg:x="143969763" fg:w="9312978"/><text x="66.6222%" y="319.50">lyron..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (9,312,978 samples, 4.29%)</title><rect x="66.3722%" y="293" width="4.2934%" height="15" fill="rgb(231,13,6)" fg:x="143969763" fg:w="9312978"/><text x="66.6222%" y="303.50">&lt;T as..</text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (8,007,453 samples, 3.69%)</title><rect x="66.9740%" y="277" width="3.6916%" height="15" fill="rgb(207,181,40)" fg:x="145275288" fg:w="8007453"/><text x="67.2240%" y="287.50">core..</text></g><g><title>core::fmt::float::float_to_decimal_display (8,007,453 samples, 3.69%)</title><rect x="66.9740%" y="261" width="3.6916%" height="15" fill="rgb(254,173,49)" fg:x="145275288" fg:w="8007453"/><text x="67.2240%" y="271.50">core..</text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (8,007,453 samples, 3.69%)</title><rect x="66.9740%" y="245" width="3.6916%" height="15" fill="rgb(221,1,38)" fg:x="145275288" fg:w="8007453"/><text x="67.2240%" y="255.50">core..</text></g><g><title>core::num::flt2dec::to_shortest_str (5,343,100 samples, 2.46%)</title><rect x="68.2024%" y="229" width="2.4632%" height="15" fill="rgb(206,124,46)" fg:x="147939641" fg:w="5343100"/><text x="68.4524%" y="239.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (4,015,687 samples, 1.85%)</title><rect x="68.8143%" y="213" width="1.8513%" height="15" fill="rgb(249,21,11)" fg:x="149267054" fg:w="4015687"/><text x="69.0643%" y="223.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (4,015,687 samples, 1.85%)</title><rect x="68.8143%" y="197" width="1.8513%" height="15" fill="rgb(222,201,40)" fg:x="149267054" fg:w="4015687"/><text x="69.0643%" y="207.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (4,015,687 samples, 1.85%)</title><rect x="68.8143%" y="181" width="1.8513%" height="15" fill="rgb(235,61,29)" fg:x="149267054" fg:w="4015687"/><text x="69.0643%" y="191.50">c..</text></g><g><title>core::num::diy_float::Fp::normalize (1,360,010 samples, 0.63%)</title><rect x="70.0386%" y="165" width="0.6270%" height="15" fill="rgb(219,207,3)" fg:x="151922731" fg:w="1360010"/><text x="70.2886%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (1,327,274 samples, 0.61%)</title><rect x="70.6656%" y="245" width="0.6119%" height="15" fill="rgb(222,56,46)" fg:x="153282741" fg:w="1327274"/><text x="70.9156%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (1,327,274 samples, 0.61%)</title><rect x="70.6656%" y="229" width="0.6119%" height="15" fill="rgb(239,76,54)" fg:x="153282741" fg:w="1327274"/><text x="70.9156%" y="239.50"></text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,327,274 samples, 0.61%)</title><rect x="70.6656%" y="213" width="0.6119%" height="15" fill="rgb(231,124,27)" fg:x="153282741" fg:w="1327274"/><text x="70.9156%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,322,455 samples, 0.61%)</title><rect x="73.1309%" y="213" width="0.6097%" height="15" fill="rgb(249,195,6)" fg:x="158630396" fg:w="1322455"/><text x="73.3809%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,322,455 samples, 0.61%)</title><rect x="73.1309%" y="197" width="0.6097%" height="15" fill="rgb(237,174,47)" fg:x="158630396" fg:w="1322455"/><text x="73.3809%" y="207.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (2,629,089 samples, 1.21%)</title><rect x="75.6159%" y="149" width="1.2120%" height="15" fill="rgb(206,201,31)" fg:x="164020562" fg:w="2629089"/><text x="75.8659%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (2,629,089 samples, 1.21%)</title><rect x="75.6159%" y="133" width="1.2120%" height="15" fill="rgb(231,57,52)" fg:x="164020562" fg:w="2629089"/><text x="75.8659%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,629,089 samples, 1.21%)</title><rect x="75.6159%" y="117" width="1.2120%" height="15" fill="rgb(248,177,22)" fg:x="164020562" fg:w="2629089"/><text x="75.8659%" y="127.50"></text></g><g><title>[libc.so.6] (1,268,411 samples, 0.58%)</title><rect x="76.2432%" y="101" width="0.5848%" height="15" fill="rgb(215,211,37)" fg:x="165381240" fg:w="1268411"/><text x="76.4932%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,328,711 samples, 0.61%)</title><rect x="78.0033%" y="117" width="0.6126%" height="15" fill="rgb(241,128,51)" fg:x="169199115" fg:w="1328711"/><text x="78.2533%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,328,711 samples, 0.61%)</title><rect x="78.0033%" y="101" width="0.6126%" height="15" fill="rgb(227,165,31)" fg:x="169199115" fg:w="1328711"/><text x="78.2533%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,832,070 samples, 1.77%)</title><rect x="77.4460%" y="133" width="1.7666%" height="15" fill="rgb(228,167,24)" fg:x="167990404" fg:w="3832070"/><text x="77.6960%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (1,294,648 samples, 0.60%)</title><rect x="78.6158%" y="117" width="0.5969%" height="15" fill="rgb(228,143,12)" fg:x="170527826" fg:w="1294648"/><text x="78.8658%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1,294,648 samples, 0.60%)</title><rect x="78.6158%" y="101" width="0.5969%" height="15" fill="rgb(249,149,8)" fg:x="170527826" fg:w="1294648"/><text x="78.8658%" y="111.50"></text></g><g><title>core::slice::memchr::memrchr (6,525,627 samples, 3.01%)</title><rect x="76.8279%" y="149" width="3.0084%" height="15" fill="rgb(243,35,44)" fg:x="166649651" fg:w="6525627"/><text x="77.0779%" y="159.50">cor..</text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to (1,352,804 samples, 0.62%)</title><rect x="79.2127%" y="133" width="0.6237%" height="15" fill="rgb(246,89,9)" fg:x="171822474" fg:w="1352804"/><text x="79.4627%" y="143.50"></text></g><g><title>core::ptr::align_offset (1,352,804 samples, 0.62%)</title><rect x="79.2127%" y="117" width="0.6237%" height="15" fill="rgb(233,213,13)" fg:x="171822474" fg:w="1352804"/><text x="79.4627%" y="127.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1,241,205 samples, 0.57%)</title><rect x="79.8364%" y="133" width="0.5722%" height="15" fill="rgb(233,141,41)" fg:x="173175278" fg:w="1241205"/><text x="80.0864%" y="143.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (1,241,205 samples, 0.57%)</title><rect x="79.8364%" y="117" width="0.5722%" height="15" fill="rgb(239,167,4)" fg:x="173175278" fg:w="1241205"/><text x="80.0864%" y="127.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (1,241,205 samples, 0.57%)</title><rect x="79.8364%" y="101" width="0.5722%" height="15" fill="rgb(209,217,16)" fg:x="173175278" fg:w="1241205"/><text x="80.0864%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15,869,647 samples, 7.32%)</title><rect x="73.7406%" y="213" width="7.3161%" height="15" fill="rgb(219,88,35)" fg:x="159952851" fg:w="15869647"/><text x="73.9906%" y="223.50">&lt;std::io::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13,113,020 samples, 6.05%)</title><rect x="75.0115%" y="197" width="6.0453%" height="15" fill="rgb(220,193,23)" fg:x="162709478" fg:w="13113020"/><text x="75.2615%" y="207.50">&lt;std::io..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (11,801,936 samples, 5.44%)</title><rect x="75.6159%" y="181" width="5.4409%" height="15" fill="rgb(230,90,52)" fg:x="164020562" fg:w="11801936"/><text x="75.8659%" y="191.50">&lt;std::i..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (11,801,936 samples, 5.44%)</title><rect x="75.6159%" y="165" width="5.4409%" height="15" fill="rgb(252,106,19)" fg:x="164020562" fg:w="11801936"/><text x="75.8659%" y="175.50">&lt;std::i..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2,647,220 samples, 1.22%)</title><rect x="79.8364%" y="149" width="1.2204%" height="15" fill="rgb(206,74,20)" fg:x="173175278" fg:w="2647220"/><text x="80.0864%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (1,406,015 samples, 0.65%)</title><rect x="80.4086%" y="133" width="0.6482%" height="15" fill="rgb(230,138,44)" fg:x="174416483" fg:w="1406015"/><text x="80.6586%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,406,015 samples, 0.65%)</title><rect x="80.4086%" y="117" width="0.6482%" height="15" fill="rgb(235,182,43)" fg:x="174416483" fg:w="1406015"/><text x="80.6586%" y="127.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2,605,580 samples, 1.20%)</title><rect x="82.2388%" y="165" width="1.2012%" height="15" fill="rgb(242,16,51)" fg:x="178386559" fg:w="2605580"/><text x="82.4888%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2,605,580 samples, 1.20%)</title><rect x="82.2388%" y="149" width="1.2012%" height="15" fill="rgb(248,9,4)" fg:x="178386559" fg:w="2605580"/><text x="82.4888%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1,278,007 samples, 0.59%)</title><rect x="82.8509%" y="133" width="0.5892%" height="15" fill="rgb(210,31,22)" fg:x="179714132" fg:w="1278007"/><text x="83.1009%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1,278,007 samples, 0.59%)</title><rect x="82.8509%" y="117" width="0.5892%" height="15" fill="rgb(239,54,39)" fg:x="179714132" fg:w="1278007"/><text x="83.1009%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1,405,641 samples, 0.65%)</title><rect x="83.4400%" y="165" width="0.6480%" height="15" fill="rgb(230,99,41)" fg:x="180992139" fg:w="1405641"/><text x="83.6900%" y="175.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1,405,641 samples, 0.65%)</title><rect x="83.4400%" y="149" width="0.6480%" height="15" fill="rgb(253,106,12)" fg:x="180992139" fg:w="1405641"/><text x="83.6900%" y="159.50"></text></g><g><title>core::cell::BorrowRefMut::new (1,405,641 samples, 0.65%)</title><rect x="83.4400%" y="133" width="0.6480%" height="15" fill="rgb(213,46,41)" fg:x="180992139" fg:w="1405641"/><text x="83.6900%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (29,087,125 samples, 13.41%)</title><rect x="71.2775%" y="245" width="13.4096%" height="15" fill="rgb(215,133,35)" fg:x="154610015" fg:w="29087125"/><text x="71.5275%" y="255.50">std::io::Write::writ..</text></g><g><title>core::fmt::write (26,405,981 samples, 12.17%)</title><rect x="72.5135%" y="229" width="12.1735%" height="15" fill="rgb(213,28,5)" fg:x="157291159" fg:w="26405981"/><text x="72.7635%" y="239.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (7,874,642 samples, 3.63%)</title><rect x="81.0568%" y="213" width="3.6303%" height="15" fill="rgb(215,77,49)" fg:x="175822498" fg:w="7874642"/><text x="81.3068%" y="223.50">core..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6,555,528 samples, 3.02%)</title><rect x="81.6649%" y="197" width="3.0222%" height="15" fill="rgb(248,100,22)" fg:x="177141612" fg:w="6555528"/><text x="81.9149%" y="207.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5,310,581 samples, 2.45%)</title><rect x="82.2388%" y="181" width="2.4483%" height="15" fill="rgb(208,67,9)" fg:x="178386559" fg:w="5310581"/><text x="82.4888%" y="191.50">&lt;s..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="165" width="0.5990%" height="15" fill="rgb(219,133,21)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="149" width="0.5990%" height="15" fill="rgb(246,46,29)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="159.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="133" width="0.5990%" height="15" fill="rgb(246,185,52)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="117" width="0.5990%" height="15" fill="rgb(252,136,11)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="101" width="0.5990%" height="15" fill="rgb(219,138,53)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="111.50"></text></g><g><title>core::mem::replace (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="85" width="0.5990%" height="15" fill="rgb(211,51,23)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="95.50"></text></g><g><title>core::ptr::write (1,299,360 samples, 0.60%)</title><rect x="84.0881%" y="69" width="0.5990%" height="15" fill="rgb(247,221,28)" fg:x="182397780" fg:w="1299360"/><text x="84.3381%" y="79.50"></text></g><g><title>lyronc::codegen::stdlib::print (49,229,690 samples, 22.70%)</title><rect x="62.6026%" y="325" width="22.6956%" height="15" fill="rgb(251,222,45)" fg:x="135793059" fg:w="49229690"/><text x="62.8526%" y="335.50">lyronc::codegen::stdlib::print</text></g><g><title>std::io::stdio::_print (31,740,008 samples, 14.63%)</title><rect x="70.6656%" y="309" width="14.6326%" height="15" fill="rgb(217,162,53)" fg:x="153282741" fg:w="31740008"/><text x="70.9156%" y="319.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (31,740,008 samples, 14.63%)</title><rect x="70.6656%" y="293" width="14.6326%" height="15" fill="rgb(229,93,14)" fg:x="153282741" fg:w="31740008"/><text x="70.9156%" y="303.50">std::io::stdio::print_..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (31,740,008 samples, 14.63%)</title><rect x="70.6656%" y="277" width="14.6326%" height="15" fill="rgb(209,67,49)" fg:x="153282741" fg:w="31740008"/><text x="70.9156%" y="287.50">&lt;std::io::stdio::Stdou..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (31,740,008 samples, 14.63%)</title><rect x="70.6656%" y="261" width="14.6326%" height="15" fill="rgb(213,87,29)" fg:x="153282741" fg:w="31740008"/><text x="70.9156%" y="271.50">&lt;&amp;std::io::stdio::Stdo..</text></g><g><title>std::io::stdio::Stderr::lock (1,325,609 samples, 0.61%)</title><rect x="84.6871%" y="245" width="0.6111%" height="15" fill="rgb(205,151,52)" fg:x="183697140" fg:w="1325609"/><text x="84.9371%" y="255.50"></text></g><g><title>std::sync::reentrant_lock::ReentrantLock&lt;T&gt;::lock (1,325,609 samples, 0.61%)</title><rect x="84.6871%" y="229" width="0.6111%" height="15" fill="rgb(253,215,39)" fg:x="183697140" fg:w="1325609"/><text x="84.9371%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1,325,609 samples, 0.61%)</title><rect x="84.6871%" y="213" width="0.6111%" height="15" fill="rgb(221,220,41)" fg:x="183697140" fg:w="1325609"/><text x="84.9371%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1,325,609 samples, 0.61%)</title><rect x="84.6871%" y="197" width="0.6111%" height="15" fill="rgb(218,133,21)" fg:x="183697140" fg:w="1325609"/><text x="84.9371%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,325,609 samples, 0.61%)</title><rect x="84.6871%" y="181" width="0.6111%" height="15" fill="rgb(221,193,43)" fg:x="183697140" fg:w="1325609"/><text x="84.9371%" y="191.50"></text></g><g><title>gxhash::gxhash::platform::platform::aes_encrypt (1,284,857 samples, 0.59%)</title><rect x="86.5711%" y="213" width="0.5923%" height="15" fill="rgb(240,128,52)" fg:x="187783759" fg:w="1284857"/><text x="86.8211%" y="223.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (1,284,857 samples, 0.59%)</title><rect x="86.5711%" y="197" width="0.5923%" height="15" fill="rgb(253,114,12)" fg:x="187783759" fg:w="1284857"/><text x="86.8211%" y="207.50"></text></g><g><title>&lt;gxhash::hasher::GxHasher as core::hash::Hasher&gt;::finish (2,589,860 samples, 1.19%)</title><rect x="86.5711%" y="245" width="1.1940%" height="15" fill="rgb(215,223,47)" fg:x="187783759" fg:w="2589860"/><text x="86.8211%" y="255.50"></text></g><g><title>gxhash::gxhash::platform::finalize (2,589,860 samples, 1.19%)</title><rect x="86.5711%" y="229" width="1.1940%" height="15" fill="rgb(248,225,23)" fg:x="187783759" fg:w="2589860"/><text x="86.8211%" y="239.50"></text></g><g><title>gxhash::gxhash::platform::platform::aes_encrypt_last (1,305,003 samples, 0.60%)</title><rect x="87.1634%" y="213" width="0.6016%" height="15" fill="rgb(250,108,0)" fg:x="189068616" fg:w="1305003"/><text x="87.4134%" y="223.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenclast_si128 (1,305,003 samples, 0.60%)</title><rect x="87.1634%" y="197" width="0.6016%" height="15" fill="rgb(228,208,7)" fg:x="189068616" fg:w="1305003"/><text x="87.4134%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (5,242,849 samples, 2.42%)</title><rect x="86.5711%" y="277" width="2.4170%" height="15" fill="rgb(244,45,10)" fg:x="187783759" fg:w="5242849"/><text x="86.8211%" y="287.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (5,242,849 samples, 2.42%)</title><rect x="86.5711%" y="261" width="2.4170%" height="15" fill="rgb(207,125,25)" fg:x="187783759" fg:w="5242849"/><text x="86.8211%" y="271.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="245" width="1.2231%" height="15" fill="rgb(210,195,18)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="229" width="1.2231%" height="15" fill="rgb(249,80,12)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="213" width="1.2231%" height="15" fill="rgb(221,65,9)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="223.50"></text></g><g><title>core::hash::Hasher::write_str (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="197" width="1.2231%" height="15" fill="rgb(235,49,36)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="207.50"></text></g><g><title>&lt;gxhash::hasher::GxHasher as core::hash::Hasher&gt;::write (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="181" width="1.2231%" height="15" fill="rgb(225,32,20)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="191.50"></text></g><g><title>gxhash::gxhash::compress_all (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="165" width="1.2231%" height="15" fill="rgb(215,141,46)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="175.50"></text></g><g><title>gxhash::gxhash::platform::get_partial (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="149" width="1.2231%" height="15" fill="rgb(250,160,47)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="159.50"></text></g><g><title>gxhash::gxhash::platform::platform::get_partial_unsafe (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="133" width="1.2231%" height="15" fill="rgb(216,222,40)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpgt_epi8 (2,652,989 samples, 1.22%)</title><rect x="87.7650%" y="117" width="1.2231%" height="15" fill="rgb(234,217,39)" fg:x="190373619" fg:w="2652989"/><text x="88.0150%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="229" width="3.0447%" height="15" fill="rgb(207,178,40)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="239.50">has..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="213" width="3.0447%" height="15" fill="rgb(221,136,13)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="223.50">has..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="197" width="3.0447%" height="15" fill="rgb(249,199,10)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="207.50">&lt;Q ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="181" width="3.0447%" height="15" fill="rgb(249,222,13)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="191.50">cor..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="165" width="3.0447%" height="15" fill="rgb(244,185,38)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="175.50">&lt;al..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="149" width="3.0447%" height="15" fill="rgb(236,202,9)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="159.50">all..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="133" width="3.0447%" height="15" fill="rgb(250,229,37)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="143.50">cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,604,357 samples, 3.04%)</title><rect x="88.9881%" y="117" width="3.0447%" height="15" fill="rgb(206,174,23)" fg:x="193026608" fg:w="6604357"/><text x="89.2381%" y="127.50">&lt;[A..</text></g><g><title>[libc.so.6] (2,675,245 samples, 1.23%)</title><rect x="90.7995%" y="101" width="1.2333%" height="15" fill="rgb(211,33,43)" fg:x="196955720" fg:w="2675245"/><text x="91.0495%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (2,472,981 samples, 1.14%)</title><rect x="92.0328%" y="229" width="1.1401%" height="15" fill="rgb(245,58,50)" fg:x="199630965" fg:w="2472981"/><text x="92.2828%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (19,811,392 samples, 9.13%)</title><rect x="85.2982%" y="325" width="9.1333%" height="15" fill="rgb(244,68,36)" fg:x="185022749" fg:w="19811392"/><text x="85.5482%" y="335.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (19,811,392 samples, 9.13%)</title><rect x="85.2982%" y="309" width="9.1333%" height="15" fill="rgb(232,229,15)" fg:x="185022749" fg:w="19811392"/><text x="85.5482%" y="319.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18,421,424 samples, 8.49%)</title><rect x="85.9390%" y="293" width="8.4925%" height="15" fill="rgb(254,30,23)" fg:x="186412717" fg:w="18421424"/><text x="86.1890%" y="303.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11,807,533 samples, 5.44%)</title><rect x="88.9881%" y="277" width="5.4434%" height="15" fill="rgb(235,160,14)" fg:x="193026608" fg:w="11807533"/><text x="89.2381%" y="287.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,807,533 samples, 5.44%)</title><rect x="88.9881%" y="261" width="5.4434%" height="15" fill="rgb(212,155,44)" fg:x="193026608" fg:w="11807533"/><text x="89.2381%" y="271.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11,807,533 samples, 5.44%)</title><rect x="88.9881%" y="245" width="5.4434%" height="15" fill="rgb(226,2,50)" fg:x="193026608" fg:w="11807533"/><text x="89.2381%" y="255.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::load (2,730,195 samples, 1.26%)</title><rect x="93.1729%" y="229" width="1.2587%" height="15" fill="rgb(234,177,6)" fg:x="202103946" fg:w="2730195"/><text x="93.4229%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,730,195 samples, 1.26%)</title><rect x="93.1729%" y="213" width="1.2587%" height="15" fill="rgb(217,24,9)" fg:x="202103946" fg:w="2730195"/><text x="93.4229%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,730,195 samples, 1.26%)</title><rect x="93.1729%" y="197" width="1.2587%" height="15" fill="rgb(220,13,46)" fg:x="202103946" fg:w="2730195"/><text x="93.4229%" y="207.50"></text></g><g><title>cfree (2,738,320 samples, 1.26%)</title><rect x="94.4316%" y="309" width="1.2624%" height="15" fill="rgb(239,221,27)" fg:x="204834141" fg:w="2738320"/><text x="94.6816%" y="319.50"></text></g><g><title>&lt;gxhash::hasher::GxHasher as core::hash::Hasher&gt;::finish (1,308,793 samples, 0.60%)</title><rect x="95.6940%" y="261" width="0.6034%" height="15" fill="rgb(222,198,25)" fg:x="207572461" fg:w="1308793"/><text x="95.9440%" y="271.50"></text></g><g><title>gxhash::gxhash::platform::finalize (1,308,793 samples, 0.60%)</title><rect x="95.6940%" y="245" width="0.6034%" height="15" fill="rgb(211,99,13)" fg:x="207572461" fg:w="1308793"/><text x="95.9440%" y="255.50"></text></g><g><title>gxhash::gxhash::platform::platform::aes_encrypt_last (1,308,793 samples, 0.60%)</title><rect x="95.6940%" y="229" width="0.6034%" height="15" fill="rgb(232,111,31)" fg:x="207572461" fg:w="1308793"/><text x="95.9440%" y="239.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenclast_si128 (1,308,793 samples, 0.60%)</title><rect x="95.6940%" y="213" width="0.6034%" height="15" fill="rgb(245,82,37)" fg:x="207572461" fg:w="1308793"/><text x="95.9440%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (2,675,238 samples, 1.23%)</title><rect x="95.6940%" y="293" width="1.2333%" height="15" fill="rgb(227,149,46)" fg:x="207572461" fg:w="2675238"/><text x="95.9440%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,675,238 samples, 1.23%)</title><rect x="95.6940%" y="277" width="1.2333%" height="15" fill="rgb(218,36,50)" fg:x="207572461" fg:w="2675238"/><text x="95.9440%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,366,445 samples, 0.63%)</title><rect x="96.2973%" y="261" width="0.6300%" height="15" fill="rgb(226,80,48)" fg:x="208881254" fg:w="1366445"/><text x="96.5473%" y="271.50"></text></g><g><title>_start (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="629" width="77.8549%" height="15" fill="rgb(238,224,15)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="639.50">_start</text></g><g><title>__libc_start_main (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="613" width="77.8549%" height="15" fill="rgb(241,136,10)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="597" width="77.8549%" height="15" fill="rgb(208,32,45)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="607.50">[libc.so.6]</text></g><g><title>main (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="581" width="77.8549%" height="15" fill="rgb(207,135,9)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="565" width="77.8549%" height="15" fill="rgb(206,86,44)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="549" width="77.8549%" height="15" fill="rgb(245,177,15)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="533" width="77.8549%" height="15" fill="rgb(206,64,50)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="517" width="77.8549%" height="15" fill="rgb(234,36,40)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="501" width="77.8549%" height="15" fill="rgb(213,64,8)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="511.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="485" width="77.8549%" height="15" fill="rgb(210,75,36)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="469" width="77.8549%" height="15" fill="rgb(229,88,21)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="453" width="77.8549%" height="15" fill="rgb(252,204,47)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="437" width="77.8549%" height="15" fill="rgb(208,77,27)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="421" width="77.8549%" height="15" fill="rgb(221,76,26)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="431.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="405" width="77.8549%" height="15" fill="rgb(225,139,18)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="415.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="389" width="77.8549%" height="15" fill="rgb(230,137,11)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>lyronc::main (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="373" width="77.8549%" height="15" fill="rgb(212,28,1)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="383.50">lyronc::main</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="357" width="77.8549%" height="15" fill="rgb(248,164,17)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="367.50">lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program</text></g><g><title>lyronc::codegen::program::VM::_run (168,877,191 samples, 77.85%)</title><rect x="19.6686%" y="341" width="77.8549%" height="15" fill="rgb(222,171,42)" fg:x="42663732" fg:w="168877191"/><text x="19.9186%" y="351.50">lyronc::codegen::program::VM::_run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6,706,782 samples, 3.09%)</title><rect x="94.4316%" y="325" width="3.0919%" height="15" fill="rgb(243,84,45)" fg:x="204834141" fg:w="6706782"/><text x="94.6816%" y="335.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,968,462 samples, 1.83%)</title><rect x="95.6940%" y="309" width="1.8295%" height="15" fill="rgb(252,49,23)" fg:x="207572461" fg:w="3968462"/><text x="95.9440%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,293,224 samples, 0.60%)</title><rect x="96.9273%" y="293" width="0.5962%" height="15" fill="rgb(215,19,7)" fg:x="210247699" fg:w="1293224"/><text x="97.1773%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,293,224 samples, 0.60%)</title><rect x="96.9273%" y="277" width="0.5962%" height="15" fill="rgb(238,81,41)" fg:x="210247699" fg:w="1293224"/><text x="97.1773%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,293,224 samples, 0.60%)</title><rect x="96.9273%" y="261" width="0.5962%" height="15" fill="rgb(210,199,37)" fg:x="210247699" fg:w="1293224"/><text x="97.1773%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,293,224 samples, 0.60%)</title><rect x="96.9273%" y="245" width="0.5962%" height="15" fill="rgb(244,192,49)" fg:x="210247699" fg:w="1293224"/><text x="97.1773%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,293,224 samples, 0.60%)</title><rect x="96.9273%" y="229" width="0.5962%" height="15" fill="rgb(226,211,11)" fg:x="210247699" fg:w="1293224"/><text x="97.1773%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,729,984 samples, 1.26%)</title><rect x="97.5235%" y="629" width="1.2586%" height="15" fill="rgb(236,162,54)" fg:x="211540923" fg:w="2729984"/><text x="97.7735%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (1,303,548 samples, 0.60%)</title><rect x="98.7820%" y="629" width="0.6010%" height="15" fill="rgb(220,229,9)" fg:x="214270907" fg:w="1303548"/><text x="99.0320%" y="639.50"></text></g><g><title>all (216,912,813 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="216912813"/><text x="0.2500%" y="671.50"></text></g><g><title>lyronc (216,912,813 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="216912813"/><text x="0.2500%" y="655.50">lyronc</text></g><g><title>lyronc::codegen::program::VM::_run (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="629" width="0.6170%" height="15" fill="rgb(231,177,25)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="639.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="613" width="0.6170%" height="15" fill="rgb(219,179,1)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="623.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="597" width="0.6170%" height="15" fill="rgb(238,219,53)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="581" width="0.6170%" height="15" fill="rgb(232,167,36)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="565" width="0.6170%" height="15" fill="rgb(244,19,51)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="549" width="0.6170%" height="15" fill="rgb(224,6,22)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="533" width="0.6170%" height="15" fill="rgb(224,145,5)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="517" width="0.6170%" height="15" fill="rgb(234,130,49)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="501" width="0.6170%" height="15" fill="rgb(254,6,2)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,338,358 samples, 0.62%)</title><rect x="99.3830%" y="485" width="0.6170%" height="15" fill="rgb(208,96,46)" fg:x="215574455" fg:w="1338358"/><text x="99.6330%" y="495.50"></text></g></svg></svg>