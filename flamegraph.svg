<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="46949048"><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (874,860 samples, 1.86%)</title><rect x="0.0000%" y="645" width="1.8634%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="874860"/><text x="0.2500%" y="655.50">&lt;..</text></g><g><title>alloc::raw_vec::finish_grow (898,761 samples, 1.91%)</title><rect x="1.8634%" y="645" width="1.9143%" height="15" fill="rgb(217,0,24)" fg:x="874860" fg:w="898761"/><text x="2.1134%" y="655.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;(lyronc::parser::ExprValue,lyronc::parser::ExprValue)&gt; (1,141,989 samples, 2.43%)</title><rect x="3.7778%" y="645" width="2.4324%" height="15" fill="rgb(221,193,54)" fg:x="1773621" fg:w="1141989"/><text x="4.0278%" y="655.50">co..</text></g><g><title>[[stack]] (3,858,291 samples, 8.22%)</title><rect x="0.0000%" y="661" width="8.2180%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3858291"/><text x="0.2500%" y="671.50">[[stack]]</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (942,681 samples, 2.01%)</title><rect x="6.2102%" y="645" width="2.0079%" height="15" fill="rgb(208,68,35)" fg:x="2915610" fg:w="942681"/><text x="6.4602%" y="655.50">l..</text></g><g><title>[ld-linux-x86-64.so.2] (1,433,276 samples, 3.05%)</title><rect x="8.2180%" y="661" width="3.0528%" height="15" fill="rgb(232,128,0)" fg:x="3858291" fg:w="1433276"/><text x="8.4680%" y="671.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1,424,445 samples, 3.03%)</title><rect x="8.2368%" y="645" width="3.0340%" height="15" fill="rgb(207,160,47)" fg:x="3867122" fg:w="1424445"/><text x="8.4868%" y="655.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1,207,334 samples, 2.57%)</title><rect x="8.6993%" y="629" width="2.5716%" height="15" fill="rgb(228,23,34)" fg:x="4084233" fg:w="1207334"/><text x="8.9493%" y="639.50">[l..</text></g><g><title>[ld-linux-x86-64.so.2] (1,207,334 samples, 2.57%)</title><rect x="8.6993%" y="613" width="2.5716%" height="15" fill="rgb(218,30,26)" fg:x="4084233" fg:w="1207334"/><text x="8.9493%" y="623.50">[l..</text></g><g><title>[ld-linux-x86-64.so.2] (1,207,334 samples, 2.57%)</title><rect x="8.6993%" y="597" width="2.5716%" height="15" fill="rgb(220,122,19)" fg:x="4084233" fg:w="1207334"/><text x="8.9493%" y="607.50">[l..</text></g><g><title>[ld-linux-x86-64.so.2] (1,207,334 samples, 2.57%)</title><rect x="8.6993%" y="581" width="2.5716%" height="15" fill="rgb(250,228,42)" fg:x="4084233" fg:w="1207334"/><text x="8.9493%" y="591.50">[l..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (932,707 samples, 1.99%)</title><rect x="11.2709%" y="645" width="1.9866%" height="15" fill="rgb(240,193,28)" fg:x="5291567" fg:w="932707"/><text x="11.5209%" y="655.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;(lyronc::parser::ExprValue,lyronc::parser::ExprValue)&gt; (924,110 samples, 1.97%)</title><rect x="13.2575%" y="645" width="1.9683%" height="15" fill="rgb(216,20,37)" fg:x="6224274" fg:w="924110"/><text x="13.5075%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;lyronc::parser::ExprValue&gt; (908,499 samples, 1.94%)</title><rect x="15.2258%" y="645" width="1.9351%" height="15" fill="rgb(206,188,39)" fg:x="7148384" fg:w="908499"/><text x="15.4758%" y="655.50">c..</text></g><g><title>[unknown] (3,885,167 samples, 8.28%)</title><rect x="11.2709%" y="661" width="8.2753%" height="15" fill="rgb(217,207,13)" fg:x="5291567" fg:w="3885167"/><text x="11.5209%" y="671.50">[unknown]</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,119,851 samples, 2.39%)</title><rect x="17.1609%" y="645" width="2.3852%" height="15" fill="rgb(231,73,38)" fg:x="8056883" fg:w="1119851"/><text x="17.4109%" y="655.50">ly..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,013,587 samples, 2.16%)</title><rect x="23.6306%" y="325" width="2.1589%" height="15" fill="rgb(225,20,46)" fg:x="11094359" fg:w="1013587"/><text x="23.8806%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,013,587 samples, 2.16%)</title><rect x="23.6306%" y="309" width="2.1589%" height="15" fill="rgb(210,31,41)" fg:x="11094359" fg:w="1013587"/><text x="23.8806%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,013,587 samples, 2.16%)</title><rect x="23.6306%" y="293" width="2.1589%" height="15" fill="rgb(221,200,47)" fg:x="11094359" fg:w="1013587"/><text x="23.8806%" y="303.50">a..</text></g><g><title>core::alloc::layout::Layout::array (1,013,587 samples, 2.16%)</title><rect x="23.6306%" y="277" width="2.1589%" height="15" fill="rgb(226,26,5)" fg:x="11094359" fg:w="1013587"/><text x="23.8806%" y="287.50">c..</text></g><g><title>core::alloc::layout::Layout::array::inner (1,013,587 samples, 2.16%)</title><rect x="23.6306%" y="261" width="2.1589%" height="15" fill="rgb(249,33,26)" fg:x="11094359" fg:w="1013587"/><text x="23.8806%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;(lyronc::parser::ExprValue,lyronc::parser::ExprValue)&gt; (994,749 samples, 2.12%)</title><rect x="25.7895%" y="309" width="2.1188%" height="15" fill="rgb(235,183,28)" fg:x="12107946" fg:w="994749"/><text x="26.0395%" y="319.50">c..</text></g><g><title>cfree (994,749 samples, 2.12%)</title><rect x="25.7895%" y="293" width="2.1188%" height="15" fill="rgb(221,5,38)" fg:x="12107946" fg:w="994749"/><text x="26.0395%" y="303.50">c..</text></g><g><title>[libc.so.6] (994,749 samples, 2.12%)</title><rect x="25.7895%" y="277" width="2.1188%" height="15" fill="rgb(247,18,42)" fg:x="12107946" fg:w="994749"/><text x="26.0395%" y="287.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (1,176,896 samples, 2.51%)</title><rect x="27.9083%" y="309" width="2.5068%" height="15" fill="rgb(241,131,45)" fg:x="13102695" fg:w="1176896"/><text x="28.1583%" y="319.50">co..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (3,134,526 samples, 6.68%)</title><rect x="25.7895%" y="325" width="6.6764%" height="15" fill="rgb(249,31,29)" fg:x="12107946" fg:w="3134526"/><text x="26.0395%" y="335.50">lyronc::c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (962,881 samples, 2.05%)</title><rect x="30.4151%" y="309" width="2.0509%" height="15" fill="rgb(225,111,53)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="319.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (962,881 samples, 2.05%)</title><rect x="30.4151%" y="293" width="2.0509%" height="15" fill="rgb(238,160,17)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="303.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (962,881 samples, 2.05%)</title><rect x="30.4151%" y="277" width="2.0509%" height="15" fill="rgb(214,148,48)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="287.50">h..</text></g><g><title>hashbrown::map::make_hash (962,881 samples, 2.05%)</title><rect x="30.4151%" y="261" width="2.0509%" height="15" fill="rgb(232,36,49)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="271.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (962,881 samples, 2.05%)</title><rect x="30.4151%" y="245" width="2.0509%" height="15" fill="rgb(209,103,24)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="255.50">c..</text></g><g><title>&lt;gxhash::hasher::GxHasher as core::hash::Hasher&gt;::finish (962,881 samples, 2.05%)</title><rect x="30.4151%" y="229" width="2.0509%" height="15" fill="rgb(229,88,8)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="239.50">&lt;..</text></g><g><title>gxhash::gxhash::platform::finalize (962,881 samples, 2.05%)</title><rect x="30.4151%" y="213" width="2.0509%" height="15" fill="rgb(213,181,19)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="223.50">g..</text></g><g><title>gxhash::gxhash::platform::platform::aes_encrypt_last (962,881 samples, 2.05%)</title><rect x="30.4151%" y="197" width="2.0509%" height="15" fill="rgb(254,191,54)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="207.50">g..</text></g><g><title>core::core_arch::x86::aes::_mm_aesenclast_si128 (962,881 samples, 2.05%)</title><rect x="30.4151%" y="181" width="2.0509%" height="15" fill="rgb(241,83,37)" fg:x="14279591" fg:w="962881"/><text x="30.6651%" y="191.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (889,242 samples, 1.89%)</title><rect x="34.5378%" y="309" width="1.8941%" height="15" fill="rgb(233,36,39)" fg:x="16215179" fg:w="889242"/><text x="34.7878%" y="319.50">&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (889,242 samples, 1.89%)</title><rect x="34.5378%" y="293" width="1.8941%" height="15" fill="rgb(226,3,54)" fg:x="16215179" fg:w="889242"/><text x="34.7878%" y="303.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (932,610 samples, 1.99%)</title><rect x="36.4319%" y="309" width="1.9864%" height="15" fill="rgb(245,192,40)" fg:x="17104421" fg:w="932610"/><text x="36.6819%" y="319.50">&lt;..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (932,610 samples, 1.99%)</title><rect x="36.4319%" y="293" width="1.9864%" height="15" fill="rgb(238,167,29)" fg:x="17104421" fg:w="932610"/><text x="36.6819%" y="303.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (986,601 samples, 2.10%)</title><rect x="40.3138%" y="37" width="2.1014%" height="15" fill="rgb(232,182,51)" fg:x="18926933" fg:w="986601"/><text x="40.5638%" y="47.50">c..</text></g><g><title>core::fmt::Formatter::write_formatted_parts (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="229" width="3.9936%" height="15" fill="rgb(231,60,39)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="239.50">core..</text></g><g><title>core::fmt::Formatter::write_formatted_parts::write_bytes (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="213" width="3.9936%" height="15" fill="rgb(208,69,12)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="223.50">core..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="197" width="3.9936%" height="15" fill="rgb(235,93,37)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="207.50">&lt;all..</text></g><g><title>alloc::string::String::push_str (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="181" width="3.9936%" height="15" fill="rgb(213,116,39)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="191.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="165" width="3.9936%" height="15" fill="rgb(222,207,29)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="175.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="149" width="3.9936%" height="15" fill="rgb(206,96,30)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="159.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="133" width="3.9936%" height="15" fill="rgb(218,138,4)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="143.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="117" width="3.9936%" height="15" fill="rgb(250,191,14)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="127.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="101" width="3.9936%" height="15" fill="rgb(239,60,40)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="111.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="85" width="3.9936%" height="15" fill="rgb(206,27,48)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="95.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="69" width="3.9936%" height="15" fill="rgb(225,35,8)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="79.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (1,874,953 samples, 3.99%)</title><rect x="40.3138%" y="53" width="3.9936%" height="15" fill="rgb(250,213,24)" fg:x="18926933" fg:w="1874953"/><text x="40.5638%" y="63.50">allo..</text></g><g><title>malloc (888,352 samples, 1.89%)</title><rect x="42.4152%" y="37" width="1.8922%" height="15" fill="rgb(247,123,22)" fg:x="19913534" fg:w="888352"/><text x="42.6652%" y="47.50">m..</text></g><g><title>core::num::&lt;impl u64&gt;::checked_sub (895,420 samples, 1.91%)</title><rect x="56.9616%" y="165" width="1.9072%" height="15" fill="rgb(231,138,38)" fg:x="26742912" fg:w="895420"/><text x="57.2116%" y="175.50">c..</text></g><g><title>lyronc::codegen::&lt;impl core::convert::TryFrom&lt;lyronc::codegen::Value&gt; for alloc::string::String&gt;::try_from (10,550,508 samples, 22.47%)</title><rect x="38.4183%" y="309" width="22.4723%" height="15" fill="rgb(231,145,46)" fg:x="18037031" fg:w="10550508"/><text x="38.6683%" y="319.50">lyronc::codegen::&lt;impl core::convert..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (9,660,606 samples, 20.58%)</title><rect x="40.3138%" y="293" width="20.5768%" height="15" fill="rgb(251,118,11)" fg:x="18926933" fg:w="9660606"/><text x="40.5638%" y="303.50">&lt;T as alloc::string::ToString&gt;::..</text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (9,660,606 samples, 20.58%)</title><rect x="40.3138%" y="277" width="20.5768%" height="15" fill="rgb(217,147,25)" fg:x="18926933" fg:w="9660606"/><text x="40.5638%" y="287.50">core::fmt::float::&lt;impl core::fm..</text></g><g><title>core::fmt::float::float_to_decimal_display (9,660,606 samples, 20.58%)</title><rect x="40.3138%" y="261" width="20.5768%" height="15" fill="rgb(247,81,37)" fg:x="18926933" fg:w="9660606"/><text x="40.5638%" y="271.50">core::fmt::float::float_to_decim..</text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (9,660,606 samples, 20.58%)</title><rect x="40.3138%" y="245" width="20.5768%" height="15" fill="rgb(209,12,38)" fg:x="18926933" fg:w="9660606"/><text x="40.5638%" y="255.50">core::fmt::float::float_to_decim..</text></g><g><title>core::num::flt2dec::to_shortest_str (7,785,653 samples, 16.58%)</title><rect x="44.3074%" y="229" width="16.5832%" height="15" fill="rgb(227,1,9)" fg:x="20801886" fg:w="7785653"/><text x="44.5574%" y="239.50">core::num::flt2dec::to_sho..</text></g><g><title>core::ops::function::FnMut::call_mut (6,854,412 samples, 14.60%)</title><rect x="46.2909%" y="213" width="14.5997%" height="15" fill="rgb(248,47,43)" fg:x="21733127" fg:w="6854412"/><text x="46.5409%" y="223.50">core::ops::function::F..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (6,854,412 samples, 14.60%)</title><rect x="46.2909%" y="197" width="14.5997%" height="15" fill="rgb(221,10,30)" fg:x="21733127" fg:w="6854412"/><text x="46.5409%" y="207.50">core::num::flt2dec::st..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (5,922,483 samples, 12.61%)</title><rect x="48.2759%" y="181" width="12.6147%" height="15" fill="rgb(210,229,1)" fg:x="22665056" fg:w="5922483"/><text x="48.5259%" y="191.50">core::num::flt2dec:..</text></g><g><title>core::num::diy_float::Fp::normalize (949,207 samples, 2.02%)</title><rect x="58.8688%" y="165" width="2.0218%" height="15" fill="rgb(222,148,37)" fg:x="27638332" fg:w="949207"/><text x="59.1188%" y="175.50">c..</text></g><g><title>core::slice::memchr::memrchr (1,092,507 samples, 2.33%)</title><rect x="66.4304%" y="213" width="2.3270%" height="15" fill="rgb(234,67,33)" fg:x="31188446" fg:w="1092507"/><text x="66.6804%" y="223.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1,092,507 samples, 2.33%)</title><rect x="66.4304%" y="197" width="2.3270%" height="15" fill="rgb(247,98,35)" fg:x="31188446" fg:w="1092507"/><text x="66.6804%" y="207.50">&lt;..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7,311,344 samples, 15.57%)</title><rect x="60.8906%" y="277" width="15.5729%" height="15" fill="rgb(247,138,52)" fg:x="28587539" fg:w="7311344"/><text x="61.1406%" y="287.50">&lt;std::io::Write::write_f..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5,604,202 samples, 11.94%)</title><rect x="64.5267%" y="261" width="11.9368%" height="15" fill="rgb(213,79,30)" fg:x="30294681" fg:w="5604202"/><text x="64.7767%" y="271.50">&lt;std::io::stdio::S..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,604,202 samples, 11.94%)</title><rect x="64.5267%" y="245" width="11.9368%" height="15" fill="rgb(246,177,23)" fg:x="30294681" fg:w="5604202"/><text x="64.7767%" y="255.50">&lt;std::io::buffered..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5,604,202 samples, 11.94%)</title><rect x="64.5267%" y="229" width="11.9368%" height="15" fill="rgb(230,62,27)" fg:x="30294681" fg:w="5604202"/><text x="64.7767%" y="239.50">&lt;std::io::buffered..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3,617,930 samples, 7.71%)</title><rect x="68.7574%" y="213" width="7.7061%" height="15" fill="rgb(216,154,8)" fg:x="32280953" fg:w="3617930"/><text x="69.0074%" y="223.50">std::io::bu..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (2,730,891 samples, 5.82%)</title><rect x="70.6468%" y="197" width="5.8167%" height="15" fill="rgb(244,35,45)" fg:x="33167992" fg:w="2730891"/><text x="70.8968%" y="207.50">&lt;std::i..</text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (2,730,891 samples, 5.82%)</title><rect x="70.6468%" y="181" width="5.8167%" height="15" fill="rgb(251,115,12)" fg:x="33167992" fg:w="2730891"/><text x="70.8968%" y="191.50">&lt;std::s..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (2,730,891 samples, 5.82%)</title><rect x="70.6468%" y="165" width="5.8167%" height="15" fill="rgb(240,54,50)" fg:x="33167992" fg:w="2730891"/><text x="70.8968%" y="175.50">std::sy..</text></g><g><title>write (2,730,891 samples, 5.82%)</title><rect x="70.6468%" y="149" width="5.8167%" height="15" fill="rgb(233,84,52)" fg:x="33167992" fg:w="2730891"/><text x="70.8968%" y="159.50">write</text></g><g><title>lyronc::codegen::stdlib::print (21,527,490 samples, 45.85%)</title><rect x="32.4660%" y="325" width="45.8529%" height="15" fill="rgb(207,117,47)" fg:x="15242472" fg:w="21527490"/><text x="32.7160%" y="335.50">lyronc::codegen::stdlib::print</text></g><g><title>std::io::Write::write_fmt (8,182,423 samples, 17.43%)</title><rect x="60.8906%" y="309" width="17.4283%" height="15" fill="rgb(249,43,39)" fg:x="28587539" fg:w="8182423"/><text x="61.1406%" y="319.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (8,182,423 samples, 17.43%)</title><rect x="60.8906%" y="293" width="17.4283%" height="15" fill="rgb(209,38,44)" fg:x="28587539" fg:w="8182423"/><text x="61.1406%" y="303.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (871,079 samples, 1.86%)</title><rect x="76.4635%" y="277" width="1.8554%" height="15" fill="rgb(236,212,23)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="287.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (871,079 samples, 1.86%)</title><rect x="76.4635%" y="261" width="1.8554%" height="15" fill="rgb(242,79,21)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="271.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (871,079 samples, 1.86%)</title><rect x="76.4635%" y="245" width="1.8554%" height="15" fill="rgb(211,96,35)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="255.50">&lt;..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (871,079 samples, 1.86%)</title><rect x="76.4635%" y="229" width="1.8554%" height="15" fill="rgb(253,215,40)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="239.50">&lt;..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (871,079 samples, 1.86%)</title><rect x="76.4635%" y="213" width="1.8554%" height="15" fill="rgb(211,81,21)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="223.50">&lt;..</text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (871,079 samples, 1.86%)</title><rect x="76.4635%" y="197" width="1.8554%" height="15" fill="rgb(208,190,38)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="207.50">s..</text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::buffered (871,079 samples, 1.86%)</title><rect x="76.4635%" y="181" width="1.8554%" height="15" fill="rgb(235,213,38)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="191.50">s..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::buffer (871,079 samples, 1.86%)</title><rect x="76.4635%" y="165" width="1.8554%" height="15" fill="rgb(237,122,38)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="175.50">s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (871,079 samples, 1.86%)</title><rect x="76.4635%" y="149" width="1.8554%" height="15" fill="rgb(244,218,35)" fg:x="35898883" fg:w="871079"/><text x="76.7135%" y="159.50">&lt;..</text></g><g><title>lyronc::codegen::uoe (1,033,667 samples, 2.20%)</title><rect x="78.3189%" y="325" width="2.2017%" height="15" fill="rgb(240,68,47)" fg:x="36769962" fg:w="1033667"/><text x="78.5689%" y="335.50">l..</text></g><g><title>hashbrown::map::make_hash (896,419 samples, 1.91%)</title><rect x="80.5205%" y="277" width="1.9093%" height="15" fill="rgb(210,16,53)" fg:x="37803629" fg:w="896419"/><text x="80.7705%" y="287.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (896,419 samples, 1.91%)</title><rect x="80.5205%" y="261" width="1.9093%" height="15" fill="rgb(235,124,12)" fg:x="37803629" fg:w="896419"/><text x="80.7705%" y="271.50">c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="229" width="3.9747%" height="15" fill="rgb(224,169,11)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="239.50">hash..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="213" width="3.9747%" height="15" fill="rgb(250,166,2)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="223.50">hash..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="197" width="3.9747%" height="15" fill="rgb(242,216,29)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="207.50">&lt;Q a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="181" width="3.9747%" height="15" fill="rgb(230,116,27)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="191.50">core..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="165" width="3.9747%" height="15" fill="rgb(228,99,48)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="175.50">&lt;all..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="149" width="3.9747%" height="15" fill="rgb(253,11,6)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="159.50">allo..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="133" width="3.9747%" height="15" fill="rgb(247,143,39)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="143.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="117" width="3.9747%" height="15" fill="rgb(236,97,10)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="127.50">&lt;[A]..</text></g><g><title>[libc.so.6] (1,866,088 samples, 3.97%)</title><rect x="82.4299%" y="101" width="3.9747%" height="15" fill="rgb(233,208,19)" fg:x="38700048" fg:w="1866088"/><text x="82.6799%" y="111.50">[lib..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,682,004 samples, 7.84%)</title><rect x="80.5205%" y="325" width="7.8426%" height="15" fill="rgb(216,164,2)" fg:x="37803629" fg:w="3682004"/><text x="80.7705%" y="335.50">std::collec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,682,004 samples, 7.84%)</title><rect x="80.5205%" y="309" width="7.8426%" height="15" fill="rgb(220,129,5)" fg:x="37803629" fg:w="3682004"/><text x="80.7705%" y="319.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,682,004 samples, 7.84%)</title><rect x="80.5205%" y="293" width="7.8426%" height="15" fill="rgb(242,17,10)" fg:x="37803629" fg:w="3682004"/><text x="80.7705%" y="303.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,785,585 samples, 5.93%)</title><rect x="82.4299%" y="277" width="5.9332%" height="15" fill="rgb(242,107,0)" fg:x="38700048" fg:w="2785585"/><text x="82.6799%" y="287.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,785,585 samples, 5.93%)</title><rect x="82.4299%" y="261" width="5.9332%" height="15" fill="rgb(251,28,31)" fg:x="38700048" fg:w="2785585"/><text x="82.6799%" y="271.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,785,585 samples, 5.93%)</title><rect x="82.4299%" y="245" width="5.9332%" height="15" fill="rgb(233,223,10)" fg:x="38700048" fg:w="2785585"/><text x="82.6799%" y="255.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::load (919,497 samples, 1.96%)</title><rect x="86.4046%" y="229" width="1.9585%" height="15" fill="rgb(215,21,27)" fg:x="40566136" fg:w="919497"/><text x="86.6546%" y="239.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (919,497 samples, 1.96%)</title><rect x="86.4046%" y="213" width="1.9585%" height="15" fill="rgb(232,23,21)" fg:x="40566136" fg:w="919497"/><text x="86.6546%" y="223.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (919,497 samples, 1.96%)</title><rect x="86.4046%" y="197" width="1.9585%" height="15" fill="rgb(244,5,23)" fg:x="40566136" fg:w="919497"/><text x="86.6546%" y="207.50">c..</text></g><g><title>_start (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="661" width="70.5815%" height="15" fill="rgb(226,81,46)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="671.50">_start</text></g><g><title>__libc_start_main (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="645" width="70.5815%" height="15" fill="rgb(247,70,30)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="629" width="70.5815%" height="15" fill="rgb(212,68,19)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="639.50">[libc.so.6]</text></g><g><title>main (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="613" width="70.5815%" height="15" fill="rgb(240,187,13)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="597" width="70.5815%" height="15" fill="rgb(223,113,26)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="581" width="70.5815%" height="15" fill="rgb(206,192,2)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="565" width="70.5815%" height="15" fill="rgb(241,108,4)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="549" width="70.5815%" height="15" fill="rgb(247,173,49)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="533" width="70.5815%" height="15" fill="rgb(224,114,35)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="517" width="70.5815%" height="15" fill="rgb(245,159,27)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="501" width="70.5815%" height="15" fill="rgb(245,172,44)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="485" width="70.5815%" height="15" fill="rgb(236,23,11)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="469" width="70.5815%" height="15" fill="rgb(205,117,38)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="453" width="70.5815%" height="15" fill="rgb(237,72,25)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="437" width="70.5815%" height="15" fill="rgb(244,70,9)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="421" width="70.5815%" height="15" fill="rgb(217,125,39)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>lyronc::main (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="405" width="70.5815%" height="15" fill="rgb(235,36,10)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="415.50">lyronc::main</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="389" width="70.5815%" height="15" fill="rgb(251,123,47)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="399.50">lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="373" width="70.5815%" height="15" fill="rgb(221,13,13)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="383.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (33,137,337 samples, 70.58%)</title><rect x="19.5462%" y="357" width="70.5815%" height="15" fill="rgb(238,131,9)" fg:x="9176734" fg:w="33137337"/><text x="19.7962%" y="367.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (32,260,891 samples, 68.71%)</title><rect x="21.4130%" y="341" width="68.7147%" height="15" fill="rgb(211,50,8)" fg:x="10053180" fg:w="32260891"/><text x="21.6630%" y="351.50">lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (828,438 samples, 1.76%)</title><rect x="88.3631%" y="325" width="1.7645%" height="15" fill="rgb(245,182,24)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (828,438 samples, 1.76%)</title><rect x="88.3631%" y="309" width="1.7645%" height="15" fill="rgb(242,14,37)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (828,438 samples, 1.76%)</title><rect x="88.3631%" y="293" width="1.7645%" height="15" fill="rgb(246,228,12)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (828,438 samples, 1.76%)</title><rect x="88.3631%" y="277" width="1.7645%" height="15" fill="rgb(213,55,15)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (828,438 samples, 1.76%)</title><rect x="88.3631%" y="261" width="1.7645%" height="15" fill="rgb(209,9,3)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (828,438 samples, 1.76%)</title><rect x="88.3631%" y="245" width="1.7645%" height="15" fill="rgb(230,59,30)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (828,438 samples, 1.76%)</title><rect x="88.3631%" y="229" width="1.7645%" height="15" fill="rgb(209,121,21)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="239.50"></text></g><g><title>core::hash::Hasher::write_str (828,438 samples, 1.76%)</title><rect x="88.3631%" y="213" width="1.7645%" height="15" fill="rgb(220,109,13)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="223.50"></text></g><g><title>&lt;gxhash::hasher::GxHasher as core::hash::Hasher&gt;::write (828,438 samples, 1.76%)</title><rect x="88.3631%" y="197" width="1.7645%" height="15" fill="rgb(232,18,1)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="207.50"></text></g><g><title>gxhash::gxhash::platform::platform::aes_encrypt (828,438 samples, 1.76%)</title><rect x="88.3631%" y="181" width="1.7645%" height="15" fill="rgb(215,41,42)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="191.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (828,438 samples, 1.76%)</title><rect x="88.3631%" y="165" width="1.7645%" height="15" fill="rgb(224,123,36)" fg:x="41485633" fg:w="828438"/><text x="88.6131%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (846,915 samples, 1.80%)</title><rect x="90.1276%" y="661" width="1.8039%" height="15" fill="rgb(240,125,3)" fg:x="42314071" fg:w="846915"/><text x="90.3776%" y="671.50">c..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,934,290 samples, 4.12%)</title><rect x="91.9315%" y="661" width="4.1200%" height="15" fill="rgb(205,98,50)" fg:x="43160986" fg:w="1934290"/><text x="92.1815%" y="671.50">lyro..</text></g><g><title>lyronc::main (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="661" width="3.9381%" height="15" fill="rgb(205,185,37)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="671.50">lyro..</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="645" width="3.9381%" height="15" fill="rgb(238,207,15)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="655.50">lyro..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="629" width="3.9381%" height="15" fill="rgb(213,199,42)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="639.50">lyro..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="613" width="3.9381%" height="15" fill="rgb(235,201,11)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="623.50">lyro..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="597" width="3.9381%" height="15" fill="rgb(207,46,11)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="607.50">lyro..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="581" width="3.9381%" height="15" fill="rgb(241,35,35)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="591.50">lyro..</text></g><g><title>lyronc::codegen::expression::&lt;impl lyronc::codegen::Visitor&gt;::visit_expr (1,848,887 samples, 3.94%)</title><rect x="96.0515%" y="565" width="3.9381%" height="15" fill="rgb(243,32,47)" fg:x="45095276" fg:w="1848887"/><text x="96.3015%" y="575.50">lyro..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (955,797 samples, 2.04%)</title><rect x="97.9538%" y="549" width="2.0358%" height="15" fill="rgb(247,202,23)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="559.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (955,797 samples, 2.04%)</title><rect x="97.9538%" y="533" width="2.0358%" height="15" fill="rgb(219,102,11)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="543.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (955,797 samples, 2.04%)</title><rect x="97.9538%" y="517" width="2.0358%" height="15" fill="rgb(243,110,44)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="527.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (955,797 samples, 2.04%)</title><rect x="97.9538%" y="501" width="2.0358%" height="15" fill="rgb(222,74,54)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (955,797 samples, 2.04%)</title><rect x="97.9538%" y="485" width="2.0358%" height="15" fill="rgb(216,99,12)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (955,797 samples, 2.04%)</title><rect x="97.9538%" y="469" width="2.0358%" height="15" fill="rgb(226,22,26)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (955,797 samples, 2.04%)</title><rect x="97.9538%" y="453" width="2.0358%" height="15" fill="rgb(217,163,10)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="463.50">h..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (955,797 samples, 2.04%)</title><rect x="97.9538%" y="437" width="2.0358%" height="15" fill="rgb(213,25,53)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="447.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (955,797 samples, 2.04%)</title><rect x="97.9538%" y="421" width="2.0358%" height="15" fill="rgb(252,105,26)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="431.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (955,797 samples, 2.04%)</title><rect x="97.9538%" y="405" width="2.0358%" height="15" fill="rgb(220,39,43)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="415.50">c..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (955,797 samples, 2.04%)</title><rect x="97.9538%" y="389" width="2.0358%" height="15" fill="rgb(229,68,48)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="399.50">&lt;..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (955,797 samples, 2.04%)</title><rect x="97.9538%" y="373" width="2.0358%" height="15" fill="rgb(252,8,32)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="383.50">a..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (955,797 samples, 2.04%)</title><rect x="97.9538%" y="357" width="2.0358%" height="15" fill="rgb(223,20,43)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="367.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (955,797 samples, 2.04%)</title><rect x="97.9538%" y="341" width="2.0358%" height="15" fill="rgb(229,81,49)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="351.50">&lt;..</text></g><g><title>[libc.so.6] (955,797 samples, 2.04%)</title><rect x="97.9538%" y="325" width="2.0358%" height="15" fill="rgb(236,28,36)" fg:x="45988366" fg:w="955797"/><text x="98.2038%" y="335.50">[..</text></g><g><title>all (46,949,048 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="46949048"/><text x="0.2500%" y="703.50"></text></g><g><title>lyronc (46,949,048 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="46949048"/><text x="0.2500%" y="687.50">lyronc</text></g><g><title>write (4,885 samples, 0.01%)</title><rect x="99.9896%" y="661" width="0.0104%" height="15" fill="rgb(233,201,37)" fg:x="46944163" fg:w="4885"/><text x="100.2396%" y="671.50"></text></g></svg></svg>