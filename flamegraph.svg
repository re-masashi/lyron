<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="290739417"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,975,461 samples, 0.68%)</title><rect x="0.0000%" y="469" width="0.6795%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1975461"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,232,457 samples, 0.77%)</title><rect x="0.6795%" y="469" width="0.7679%" height="15" fill="rgb(217,0,24)" fg:x="1975461" fg:w="2232457"/><text x="0.9295%" y="479.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (2,516,966 samples, 0.87%)</title><rect x="1.4473%" y="469" width="0.8657%" height="15" fill="rgb(221,193,54)" fg:x="4207918" fg:w="2516966"/><text x="1.6973%" y="479.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (11,575,203 samples, 3.98%)</title><rect x="2.3130%" y="453" width="3.9813%" height="15" fill="rgb(248,212,6)" fg:x="6724884" fg:w="11575203"/><text x="2.5630%" y="463.50">&lt;lyr..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="437" width="0.8809%" height="15" fill="rgb(208,68,35)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="421" width="0.8809%" height="15" fill="rgb(232,128,0)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="405" width="0.8809%" height="15" fill="rgb(207,160,47)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="389" width="0.8809%" height="15" fill="rgb(228,23,34)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="373" width="0.8809%" height="15" fill="rgb(218,30,26)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="357" width="0.8809%" height="15" fill="rgb(220,122,19)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="341" width="0.8809%" height="15" fill="rgb(250,228,42)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="325" width="0.8809%" height="15" fill="rgb(240,193,28)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="309" width="0.8809%" height="15" fill="rgb(216,20,37)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="293" width="0.8809%" height="15" fill="rgb(206,188,39)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="277" width="0.8809%" height="15" fill="rgb(217,207,13)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="261" width="0.8809%" height="15" fill="rgb(231,73,38)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="271.50"></text></g><g><title>__rdl_alloc (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="245" width="0.8809%" height="15" fill="rgb(225,20,46)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,561,114 samples, 0.88%)</title><rect x="5.4134%" y="229" width="0.8809%" height="15" fill="rgb(210,31,41)" fg:x="15738973" fg:w="2561114"/><text x="5.6634%" y="239.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::fmt::Display&gt;::fmt (2,429,495 samples, 0.84%)</title><rect x="6.2943%" y="453" width="0.8356%" height="15" fill="rgb(221,200,47)" fg:x="18300087" fg:w="2429495"/><text x="6.5443%" y="463.50"></text></g><g><title>[libc.so.6] (1,917,424 samples, 0.66%)</title><rect x="7.1300%" y="453" width="0.6595%" height="15" fill="rgb(226,26,5)" fg:x="20729582" fg:w="1917424"/><text x="7.3800%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (10,002,062 samples, 3.44%)</title><rect x="7.7895%" y="453" width="3.4402%" height="15" fill="rgb(249,33,26)" fg:x="22647006" fg:w="10002062"/><text x="8.0395%" y="463.50">cor..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (722,141 samples, 0.25%)</title><rect x="11.2297%" y="453" width="0.2484%" height="15" fill="rgb(235,183,28)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (722,141 samples, 0.25%)</title><rect x="11.2297%" y="437" width="0.2484%" height="15" fill="rgb(221,5,38)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (722,141 samples, 0.25%)</title><rect x="11.2297%" y="421" width="0.2484%" height="15" fill="rgb(247,18,42)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (722,141 samples, 0.25%)</title><rect x="11.2297%" y="405" width="0.2484%" height="15" fill="rgb(241,131,45)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (722,141 samples, 0.25%)</title><rect x="11.2297%" y="389" width="0.2484%" height="15" fill="rgb(249,31,29)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (722,141 samples, 0.25%)</title><rect x="11.2297%" y="373" width="0.2484%" height="15" fill="rgb(225,111,53)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (722,141 samples, 0.25%)</title><rect x="11.2297%" y="357" width="0.2484%" height="15" fill="rgb(238,160,17)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (722,141 samples, 0.25%)</title><rect x="11.2297%" y="341" width="0.2484%" height="15" fill="rgb(214,148,48)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="351.50"></text></g><g><title>__rdl_dealloc (722,141 samples, 0.25%)</title><rect x="11.2297%" y="325" width="0.2484%" height="15" fill="rgb(232,36,49)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (722,141 samples, 0.25%)</title><rect x="11.2297%" y="309" width="0.2484%" height="15" fill="rgb(209,103,24)" fg:x="32649068" fg:w="722141"/><text x="11.4797%" y="319.50"></text></g><g><title>[unknown] (27,098,184 samples, 9.32%)</title><rect x="2.3130%" y="469" width="9.3204%" height="15" fill="rgb(229,88,8)" fg:x="6724884" fg:w="27098184"/><text x="2.5630%" y="479.50">[unknown]</text></g><g><title>malloc (451,859 samples, 0.16%)</title><rect x="11.4780%" y="453" width="0.1554%" height="15" fill="rgb(213,181,19)" fg:x="33371209" fg:w="451859"/><text x="11.7280%" y="463.50"></text></g><g><title>pthread_getattr_np (451,859 samples, 0.16%)</title><rect x="11.6335%" y="405" width="0.1554%" height="15" fill="rgb(254,191,54)" fg:x="33823068" fg:w="451859"/><text x="11.8835%" y="415.50"></text></g><g><title>__isoc23_sscanf (451,859 samples, 0.16%)</title><rect x="11.6335%" y="389" width="0.1554%" height="15" fill="rgb(241,83,37)" fg:x="33823068" fg:w="451859"/><text x="11.8835%" y="399.50"></text></g><g><title>[libc.so.6] (451,859 samples, 0.16%)</title><rect x="11.6335%" y="373" width="0.1554%" height="15" fill="rgb(233,36,39)" fg:x="33823068" fg:w="451859"/><text x="11.8835%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::program::VM&gt; (3,458,725 samples, 1.19%)</title><rect x="11.7889%" y="341" width="1.1896%" height="15" fill="rgb(226,3,54)" fg:x="34274927" fg:w="3458725"/><text x="12.0389%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;lyronc::codegen::Value&gt;&gt; (3,458,725 samples, 1.19%)</title><rect x="11.7889%" y="325" width="1.1896%" height="15" fill="rgb(245,192,40)" fg:x="34274927" fg:w="3458725"/><text x="12.0389%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,458,725 samples, 1.19%)</title><rect x="11.7889%" y="309" width="1.1896%" height="15" fill="rgb(238,167,29)" fg:x="34274927" fg:w="3458725"/><text x="12.0389%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lyronc::codegen::Value]&gt; (3,458,725 samples, 1.19%)</title><rect x="11.7889%" y="293" width="1.1896%" height="15" fill="rgb(232,182,51)" fg:x="34274927" fg:w="3458725"/><text x="12.0389%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (1,685,726 samples, 0.58%)</title><rect x="12.3987%" y="277" width="0.5798%" height="15" fill="rgb(231,60,39)" fg:x="36047926" fg:w="1685726"/><text x="12.6487%" y="287.50"></text></g><g><title>core::fmt::Formatter::new (2,633,251 samples, 0.91%)</title><rect x="23.2171%" y="245" width="0.9057%" height="15" fill="rgb(208,69,12)" fg:x="67501143" fg:w="2633251"/><text x="23.4671%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2,562,217 samples, 0.88%)</title><rect x="24.1228%" y="149" width="0.8813%" height="15" fill="rgb(235,93,37)" fg:x="70134394" fg:w="2562217"/><text x="24.3728%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (15,028,349 samples, 5.17%)</title><rect x="28.4661%" y="69" width="5.1690%" height="15" fill="rgb(213,116,39)" fg:x="82762237" fg:w="15028349"/><text x="28.7161%" y="79.50">alloc:..</text></g><g><title>malloc (15,028,349 samples, 5.17%)</title><rect x="28.4661%" y="53" width="5.1690%" height="15" fill="rgb(222,207,29)" fg:x="82762237" fg:w="15028349"/><text x="28.7161%" y="63.50">malloc</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (27,598,934 samples, 9.49%)</title><rect x="25.0040%" y="149" width="9.4927%" height="15" fill="rgb(206,96,30)" fg:x="72696611" fg:w="27598934"/><text x="25.2540%" y="159.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27,598,934 samples, 9.49%)</title><rect x="25.0040%" y="133" width="9.4927%" height="15" fill="rgb(218,138,4)" fg:x="72696611" fg:w="27598934"/><text x="25.2540%" y="143.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (27,598,934 samples, 9.49%)</title><rect x="25.0040%" y="117" width="9.4927%" height="15" fill="rgb(250,191,14)" fg:x="72696611" fg:w="27598934"/><text x="25.2540%" y="127.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (20,060,870 samples, 6.90%)</title><rect x="27.5968%" y="101" width="6.8999%" height="15" fill="rgb(239,60,40)" fg:x="80234675" fg:w="20060870"/><text x="27.8468%" y="111.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (20,060,870 samples, 6.90%)</title><rect x="27.5968%" y="85" width="6.8999%" height="15" fill="rgb(206,27,48)" fg:x="80234675" fg:w="20060870"/><text x="27.8468%" y="95.50">alloc::ra..</text></g><g><title>core::cmp::max (2,504,959 samples, 0.86%)</title><rect x="33.6351%" y="69" width="0.8616%" height="15" fill="rgb(225,35,8)" fg:x="97790586" fg:w="2504959"/><text x="33.8851%" y="79.50"></text></g><g><title>core::cmp::Ord::max (2,504,959 samples, 0.86%)</title><rect x="33.6351%" y="53" width="0.8616%" height="15" fill="rgb(250,213,24)" fg:x="97790586" fg:w="2504959"/><text x="33.8851%" y="63.50"></text></g><g><title>core::cmp::max_by (2,504,959 samples, 0.86%)</title><rect x="33.6351%" y="37" width="0.8616%" height="15" fill="rgb(247,123,22)" fg:x="97790586" fg:w="2504959"/><text x="33.8851%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32,763,524 samples, 11.27%)</title><rect x="24.1228%" y="229" width="11.2690%" height="15" fill="rgb(231,138,38)" fg:x="70134394" fg:w="32763524"/><text x="24.3728%" y="239.50">&lt;alloc::string::S..</text></g><g><title>alloc::string::String::push_str (32,763,524 samples, 11.27%)</title><rect x="24.1228%" y="213" width="11.2690%" height="15" fill="rgb(231,145,46)" fg:x="70134394" fg:w="32763524"/><text x="24.3728%" y="223.50">alloc::string::St..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32,763,524 samples, 11.27%)</title><rect x="24.1228%" y="197" width="11.2690%" height="15" fill="rgb(251,118,11)" fg:x="70134394" fg:w="32763524"/><text x="24.3728%" y="207.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32,763,524 samples, 11.27%)</title><rect x="24.1228%" y="181" width="11.2690%" height="15" fill="rgb(217,147,25)" fg:x="70134394" fg:w="32763524"/><text x="24.3728%" y="191.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32,763,524 samples, 11.27%)</title><rect x="24.1228%" y="165" width="11.2690%" height="15" fill="rgb(247,81,37)" fg:x="70134394" fg:w="32763524"/><text x="24.3728%" y="175.50">alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,602,373 samples, 0.90%)</title><rect x="34.4967%" y="149" width="0.8951%" height="15" fill="rgb(209,12,38)" fg:x="100295545" fg:w="2602373"/><text x="34.7467%" y="159.50"></text></g><g><title>&lt;lyronc::codegen::Value as core::fmt::Display&gt;::fmt (60,004,377 samples, 20.64%)</title><rect x="15.4704%" y="293" width="20.6385%" height="15" fill="rgb(227,1,9)" fg:x="44978538" fg:w="60004377"/><text x="15.7204%" y="303.50">&lt;lyronc::codegen::Value as core:..</text></g><g><title>core::fmt::Formatter::write_fmt (54,785,735 samples, 18.84%)</title><rect x="17.2654%" y="277" width="18.8436%" height="15" fill="rgb(248,47,43)" fg:x="50197180" fg:w="54785735"/><text x="17.5154%" y="287.50">core::fmt::Formatter::write_f..</text></g><g><title>core::fmt::write (54,785,735 samples, 18.84%)</title><rect x="17.2654%" y="261" width="18.8436%" height="15" fill="rgb(221,10,30)" fg:x="50197180" fg:w="54785735"/><text x="17.5154%" y="271.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (34,848,521 samples, 11.99%)</title><rect x="24.1228%" y="245" width="11.9862%" height="15" fill="rgb(210,229,1)" fg:x="70134394" fg:w="34848521"/><text x="24.3728%" y="255.50">core::fmt::rt::Arg..</text></g><g><title>core::fmt::Formatter::pad (2,084,997 samples, 0.72%)</title><rect x="35.3918%" y="229" width="0.7171%" height="15" fill="rgb(222,148,37)" fg:x="102897918" fg:w="2084997"/><text x="35.6418%" y="239.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (62,500,701 samples, 21.50%)</title><rect x="15.4704%" y="309" width="21.4972%" height="15" fill="rgb(234,67,33)" fg:x="44978538" fg:w="62500701"/><text x="15.7204%" y="319.50">&lt;T as alloc::string::SpecToString&gt;..</text></g><g><title>alloc::string::String::new (2,496,324 samples, 0.86%)</title><rect x="36.1089%" y="293" width="0.8586%" height="15" fill="rgb(247,98,35)" fg:x="104982915" fg:w="2496324"/><text x="36.3589%" y="303.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (67,251,441 samples, 23.13%)</title><rect x="15.4704%" y="325" width="23.1312%" height="15" fill="rgb(247,138,52)" fg:x="44978538" fg:w="67251441"/><text x="15.7204%" y="335.50">&lt;T as alloc::string::ToString&gt;::to_st..</text></g><g><title>&lt;alloc::string::String as alloc::string::SpecToString&gt;::spec_to_string (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="309" width="1.6340%" height="15" fill="rgb(213,79,30)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="319.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="293" width="1.6340%" height="15" fill="rgb(246,177,23)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="277" width="1.6340%" height="15" fill="rgb(230,62,27)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="261" width="1.6340%" height="15" fill="rgb(216,154,8)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="245" width="1.6340%" height="15" fill="rgb(244,35,45)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="229" width="1.6340%" height="15" fill="rgb(251,115,12)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="213" width="1.6340%" height="15" fill="rgb(240,54,50)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="197" width="1.6340%" height="15" fill="rgb(233,84,52)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="181" width="1.6340%" height="15" fill="rgb(207,117,47)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="165" width="1.6340%" height="15" fill="rgb(249,43,39)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="149" width="1.6340%" height="15" fill="rgb(209,38,44)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="133" width="1.6340%" height="15" fill="rgb(236,212,23)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="117" width="1.6340%" height="15" fill="rgb(242,79,21)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="127.50"></text></g><g><title>alloc::alloc::alloc (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="101" width="1.6340%" height="15" fill="rgb(211,96,35)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="111.50"></text></g><g><title>__rdl_alloc (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="85" width="1.6340%" height="15" fill="rgb(253,215,40)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="69" width="1.6340%" height="15" fill="rgb(211,81,21)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="79.50"></text></g><g><title>malloc (4,750,740 samples, 1.63%)</title><rect x="36.9675%" y="53" width="1.6340%" height="15" fill="rgb(208,190,38)" fg:x="107479239" fg:w="4750740"/><text x="37.2175%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,205,572 samples, 1.45%)</title><rect x="39.3101%" y="181" width="1.4465%" height="15" fill="rgb(235,213,38)" fg:x="114289983" fg:w="4205572"/><text x="39.5601%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,205,572 samples, 1.45%)</title><rect x="39.3101%" y="165" width="1.4465%" height="15" fill="rgb(237,122,38)" fg:x="114289983" fg:w="4205572"/><text x="39.5601%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,205,572 samples, 1.45%)</title><rect x="39.3101%" y="149" width="1.4465%" height="15" fill="rgb(244,218,35)" fg:x="114289983" fg:w="4205572"/><text x="39.5601%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,205,572 samples, 1.45%)</title><rect x="39.3101%" y="133" width="1.4465%" height="15" fill="rgb(240,68,47)" fg:x="114289983" fg:w="4205572"/><text x="39.5601%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="117" width="0.6120%" height="15" fill="rgb(210,16,53)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="101" width="0.6120%" height="15" fill="rgb(235,124,12)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="85" width="0.6120%" height="15" fill="rgb(224,169,11)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="95.50"></text></g><g><title>__rdl_alloc (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="69" width="0.6120%" height="15" fill="rgb(250,166,2)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="53" width="0.6120%" height="15" fill="rgb(242,216,29)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="63.50"></text></g><g><title>malloc (1,779,311 samples, 0.61%)</title><rect x="40.1446%" y="37" width="0.6120%" height="15" fill="rgb(230,116,27)" fg:x="116716244" fg:w="1779311"/><text x="40.3946%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,795,679 samples, 2.34%)</title><rect x="39.3101%" y="261" width="2.3374%" height="15" fill="rgb(228,99,48)" fg:x="114289983" fg:w="6795679"/><text x="39.5601%" y="271.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,795,679 samples, 2.34%)</title><rect x="39.3101%" y="245" width="2.3374%" height="15" fill="rgb(253,11,6)" fg:x="114289983" fg:w="6795679"/><text x="39.5601%" y="255.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,795,679 samples, 2.34%)</title><rect x="39.3101%" y="229" width="2.3374%" height="15" fill="rgb(247,143,39)" fg:x="114289983" fg:w="6795679"/><text x="39.5601%" y="239.50">a..</text></g><g><title>alloc::slice::hack::to_vec (6,795,679 samples, 2.34%)</title><rect x="39.3101%" y="213" width="2.3374%" height="15" fill="rgb(236,97,10)" fg:x="114289983" fg:w="6795679"/><text x="39.5601%" y="223.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6,795,679 samples, 2.34%)</title><rect x="39.3101%" y="197" width="2.3374%" height="15" fill="rgb(233,208,19)" fg:x="114289983" fg:w="6795679"/><text x="39.5601%" y="207.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,590,107 samples, 0.89%)</title><rect x="40.7566%" y="181" width="0.8909%" height="15" fill="rgb(216,164,2)" fg:x="118495555" fg:w="2590107"/><text x="41.0066%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,590,107 samples, 0.89%)</title><rect x="40.7566%" y="165" width="0.8909%" height="15" fill="rgb(220,129,5)" fg:x="118495555" fg:w="2590107"/><text x="41.0066%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="261" width="0.8851%" height="15" fill="rgb(242,17,10)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="245" width="0.8851%" height="15" fill="rgb(242,107,0)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="229" width="0.8851%" height="15" fill="rgb(251,28,31)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="213" width="0.8851%" height="15" fill="rgb(233,223,10)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="197" width="0.8851%" height="15" fill="rgb(215,21,27)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="181" width="0.8851%" height="15" fill="rgb(232,23,21)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="165" width="0.8851%" height="15" fill="rgb(244,5,23)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="175.50"></text></g><g><title>__rdl_alloc (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="149" width="0.8851%" height="15" fill="rgb(226,81,46)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="133" width="0.8851%" height="15" fill="rgb(247,70,30)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="143.50"></text></g><g><title>malloc (2,573,367 samples, 0.89%)</title><rect x="41.6475%" y="117" width="0.8851%" height="15" fill="rgb(212,68,19)" fg:x="121085662" fg:w="2573367"/><text x="41.8975%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14,019,153 samples, 4.82%)</title><rect x="38.6016%" y="325" width="4.8219%" height="15" fill="rgb(240,187,13)" fg:x="112229979" fg:w="14019153"/><text x="38.8516%" y="335.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14,019,153 samples, 4.82%)</title><rect x="38.6016%" y="309" width="4.8219%" height="15" fill="rgb(223,113,26)" fg:x="112229979" fg:w="14019153"/><text x="38.8516%" y="319.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (14,019,153 samples, 4.82%)</title><rect x="38.6016%" y="293" width="4.8219%" height="15" fill="rgb(206,192,2)" fg:x="112229979" fg:w="14019153"/><text x="38.8516%" y="303.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14,019,153 samples, 4.82%)</title><rect x="38.6016%" y="277" width="4.8219%" height="15" fill="rgb(241,108,4)" fg:x="112229979" fg:w="14019153"/><text x="38.8516%" y="287.50">&lt;T as ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2,590,103 samples, 0.89%)</title><rect x="42.5326%" y="261" width="0.8909%" height="15" fill="rgb(247,173,49)" fg:x="123659029" fg:w="2590103"/><text x="42.7826%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="229" width="3.4354%" height="15" fill="rgb(224,114,35)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="239.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="213" width="3.4354%" height="15" fill="rgb(245,159,27)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="223.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="197" width="3.4354%" height="15" fill="rgb(245,172,44)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="207.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="181" width="3.4354%" height="15" fill="rgb(236,23,11)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="191.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="165" width="3.4354%" height="15" fill="rgb(205,117,38)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="175.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="149" width="3.4354%" height="15" fill="rgb(237,72,25)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="159.50">all..</text></g><g><title>alloc::alloc::alloc (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="133" width="3.4354%" height="15" fill="rgb(244,70,9)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="143.50">all..</text></g><g><title>__rdl_alloc (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="117" width="3.4354%" height="15" fill="rgb(217,125,39)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="127.50">__r..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="101" width="3.4354%" height="15" fill="rgb(235,36,10)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="111.50">std..</text></g><g><title>malloc (9,988,046 samples, 3.44%)</title><rect x="44.3182%" y="85" width="3.4354%" height="15" fill="rgb(251,123,47)" fg:x="128850605" fg:w="9988046"/><text x="44.5682%" y="95.50">mal..</text></g><g><title>&lt;lyronc::codegen::Value as core::clone::Clone&gt;::clone (15,108,426 samples, 5.20%)</title><rect x="43.4235%" y="325" width="5.1966%" height="15" fill="rgb(221,13,13)" fg:x="126249132" fg:w="15108426"/><text x="43.6735%" y="335.50">&lt;lyron..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12,506,953 samples, 4.30%)</title><rect x="44.3182%" y="309" width="4.3018%" height="15" fill="rgb(238,131,9)" fg:x="128850605" fg:w="12506953"/><text x="44.5682%" y="319.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,506,953 samples, 4.30%)</title><rect x="44.3182%" y="293" width="4.3018%" height="15" fill="rgb(211,50,8)" fg:x="128850605" fg:w="12506953"/><text x="44.5682%" y="303.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,506,953 samples, 4.30%)</title><rect x="44.3182%" y="277" width="4.3018%" height="15" fill="rgb(245,182,24)" fg:x="128850605" fg:w="12506953"/><text x="44.5682%" y="287.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (12,506,953 samples, 4.30%)</title><rect x="44.3182%" y="261" width="4.3018%" height="15" fill="rgb(242,14,37)" fg:x="128850605" fg:w="12506953"/><text x="44.5682%" y="271.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12,506,953 samples, 4.30%)</title><rect x="44.3182%" y="245" width="4.3018%" height="15" fill="rgb(246,228,12)" fg:x="128850605" fg:w="12506953"/><text x="44.5682%" y="255.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,518,907 samples, 0.87%)</title><rect x="47.7536%" y="229" width="0.8664%" height="15" fill="rgb(213,55,15)" fg:x="138838651" fg:w="2518907"/><text x="48.0036%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,518,907 samples, 0.87%)</title><rect x="47.7536%" y="213" width="0.8664%" height="15" fill="rgb(209,9,3)" fg:x="138838651" fg:w="2518907"/><text x="48.0036%" y="223.50"></text></g><g><title>[libc.so.6] (2,518,907 samples, 0.87%)</title><rect x="47.7536%" y="197" width="0.8664%" height="15" fill="rgb(230,59,30)" fg:x="138838651" fg:w="2518907"/><text x="48.0036%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,218,096 samples, 0.42%)</title><rect x="48.6200%" y="309" width="0.4190%" height="15" fill="rgb(209,121,21)" fg:x="141357558" fg:w="1218096"/><text x="48.8700%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,218,096 samples, 0.42%)</title><rect x="48.6200%" y="293" width="0.4190%" height="15" fill="rgb(220,109,13)" fg:x="141357558" fg:w="1218096"/><text x="48.8700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,218,096 samples, 0.42%)</title><rect x="48.6200%" y="277" width="0.4190%" height="15" fill="rgb(232,18,1)" fg:x="141357558" fg:w="1218096"/><text x="48.8700%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,218,096 samples, 0.42%)</title><rect x="48.6200%" y="261" width="0.4190%" height="15" fill="rgb(215,41,42)" fg:x="141357558" fg:w="1218096"/><text x="48.8700%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17,384,296 samples, 5.98%)</title><rect x="48.6200%" y="325" width="5.9793%" height="15" fill="rgb(224,123,36)" fg:x="141357558" fg:w="17384296"/><text x="48.8700%" y="335.50">alloc::v..</text></g><g><title>core::ptr::write (16,166,200 samples, 5.56%)</title><rect x="49.0390%" y="309" width="5.5604%" height="15" fill="rgb(240,125,3)" fg:x="142575654" fg:w="16166200"/><text x="49.2890%" y="319.50">core::p..</text></g><g><title>cfree (14,931,379 samples, 5.14%)</title><rect x="54.5994%" y="325" width="5.1357%" height="15" fill="rgb(205,98,50)" fg:x="158741854" fg:w="14931379"/><text x="54.8494%" y="335.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="325" width="9.5785%" height="15" fill="rgb(205,185,37)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="335.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="309" width="9.5785%" height="15" fill="rgb(238,207,15)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="319.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="293" width="9.5785%" height="15" fill="rgb(213,199,42)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="303.50">core::ptr::dro..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="277" width="9.5785%" height="15" fill="rgb(235,201,11)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="287.50">&lt;alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="261" width="9.5785%" height="15" fill="rgb(207,46,11)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="271.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="245" width="9.5785%" height="15" fill="rgb(241,35,35)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="255.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::dealloc (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="229" width="9.5785%" height="15" fill="rgb(243,32,47)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="239.50">alloc::alloc::..</text></g><g><title>__rdl_dealloc (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="213" width="9.5785%" height="15" fill="rgb(247,202,23)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="223.50">__rdl_dealloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="197" width="9.5785%" height="15" fill="rgb(219,102,11)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="207.50">std::sys::allo..</text></g><g><title>cfree (27,848,441 samples, 9.58%)</title><rect x="59.7350%" y="181" width="9.5785%" height="15" fill="rgb(243,110,44)" fg:x="173673233" fg:w="27848441"/><text x="59.9850%" y="191.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::string::String&gt;&gt; (2,531,921 samples, 0.87%)</title><rect x="69.3135%" y="325" width="0.8709%" height="15" fill="rgb(222,74,54)" fg:x="201521674" fg:w="2531921"/><text x="69.5635%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,531,921 samples, 0.87%)</title><rect x="69.3135%" y="309" width="0.8709%" height="15" fill="rgb(216,99,12)" fg:x="201521674" fg:w="2531921"/><text x="69.5635%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2,531,921 samples, 0.87%)</title><rect x="69.3135%" y="293" width="0.8709%" height="15" fill="rgb(226,22,26)" fg:x="201521674" fg:w="2531921"/><text x="69.5635%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (14,810,738 samples, 5.09%)</title><rect x="70.1844%" y="325" width="5.0942%" height="15" fill="rgb(217,163,10)" fg:x="204053595" fg:w="14810738"/><text x="70.4344%" y="335.50">core::..</text></g><g><title>lyronc::codegen::program::VM::pop (4,061,344 samples, 1.40%)</title><rect x="75.2785%" y="325" width="1.3969%" height="15" fill="rgb(213,25,53)" fg:x="218864333" fg:w="4061344"/><text x="75.5285%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4,061,344 samples, 1.40%)</title><rect x="75.2785%" y="309" width="1.3969%" height="15" fill="rgb(252,105,26)" fg:x="218864333" fg:w="4061344"/><text x="75.5285%" y="319.50"></text></g><g><title>core::ptr::read (4,061,344 samples, 1.40%)</title><rect x="75.2785%" y="293" width="1.3969%" height="15" fill="rgb(220,39,43)" fg:x="218864333" fg:w="4061344"/><text x="75.5285%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (897,441 samples, 0.31%)</title><rect x="77.5625%" y="197" width="0.3087%" height="15" fill="rgb(229,68,48)" fg:x="225504685" fg:w="897441"/><text x="77.8125%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (897,441 samples, 0.31%)</title><rect x="77.5625%" y="181" width="0.3087%" height="15" fill="rgb(252,8,32)" fg:x="225504685" fg:w="897441"/><text x="77.8125%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8,300,496 samples, 2.85%)</title><rect x="76.6754%" y="245" width="2.8550%" height="15" fill="rgb(223,20,43)" fg:x="222925677" fg:w="8300496"/><text x="76.9254%" y="255.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,300,496 samples, 2.85%)</title><rect x="76.6754%" y="229" width="2.8550%" height="15" fill="rgb(229,81,49)" fg:x="222925677" fg:w="8300496"/><text x="76.9254%" y="239.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8,300,496 samples, 2.85%)</title><rect x="76.6754%" y="213" width="2.8550%" height="15" fill="rgb(236,28,36)" fg:x="222925677" fg:w="8300496"/><text x="76.9254%" y="223.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,824,047 samples, 1.66%)</title><rect x="77.8711%" y="197" width="1.6592%" height="15" fill="rgb(249,185,26)" fg:x="226402126" fg:w="4824047"/><text x="78.1211%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,435,480 samples, 0.84%)</title><rect x="78.6927%" y="181" width="0.8377%" height="15" fill="rgb(249,174,33)" fg:x="228790693" fg:w="2435480"/><text x="78.9427%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,497,444 samples, 0.86%)</title><rect x="79.5304%" y="245" width="0.8590%" height="15" fill="rgb(233,201,37)" fg:x="231226173" fg:w="2497444"/><text x="79.7804%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,970,853 samples, 3.43%)</title><rect x="80.3894%" y="149" width="3.4295%" height="15" fill="rgb(221,78,26)" fg:x="233723617" fg:w="9970853"/><text x="80.6394%" y="159.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (7,463,039 samples, 2.57%)</title><rect x="81.2519%" y="133" width="2.5669%" height="15" fill="rgb(250,127,30)" fg:x="236231431" fg:w="7463039"/><text x="81.5019%" y="143.50">co..</text></g><g><title>core::cmp::min (2,456,833 samples, 0.85%)</title><rect x="84.7177%" y="117" width="0.8450%" height="15" fill="rgb(230,49,44)" fg:x="246307849" fg:w="2456833"/><text x="84.9677%" y="127.50"></text></g><g><title>core::cmp::Ord::min (2,456,833 samples, 0.85%)</title><rect x="84.7177%" y="101" width="0.8450%" height="15" fill="rgb(229,67,23)" fg:x="246307849" fg:w="2456833"/><text x="84.9677%" y="111.50"></text></g><g><title>core::cmp::min_by (2,456,833 samples, 0.85%)</title><rect x="84.7177%" y="85" width="0.8450%" height="15" fill="rgb(249,83,47)" fg:x="246307849" fg:w="2456833"/><text x="84.9677%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (28,254,243 samples, 9.72%)</title><rect x="76.6754%" y="277" width="9.7181%" height="15" fill="rgb(215,43,3)" fg:x="222925677" fg:w="28254243"/><text x="76.9254%" y="287.50">hashbrown::map..</text></g><g><title>core::hash::BuildHasher::hash_one (28,254,243 samples, 9.72%)</title><rect x="76.6754%" y="261" width="9.7181%" height="15" fill="rgb(238,154,13)" fg:x="222925677" fg:w="28254243"/><text x="76.9254%" y="271.50">core::hash::Bu..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="245" width="6.0041%" height="15" fill="rgb(219,56,2)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="255.50">core::ha..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="229" width="6.0041%" height="15" fill="rgb(233,0,4)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="239.50">&lt;alloc::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="213" width="6.0041%" height="15" fill="rgb(235,30,7)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="223.50">core::ha..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="197" width="6.0041%" height="15" fill="rgb(250,79,13)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="207.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="181" width="6.0041%" height="15" fill="rgb(211,146,34)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="191.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (17,456,303 samples, 6.00%)</title><rect x="80.3894%" y="165" width="6.0041%" height="15" fill="rgb(228,22,38)" fg:x="233723617" fg:w="17456303"/><text x="80.6394%" y="175.50">&lt;core::h..</text></g><g><title>core::hash::Hasher::write_u8 (7,485,450 samples, 2.57%)</title><rect x="83.8189%" y="149" width="2.5746%" height="15" fill="rgb(235,168,5)" fg:x="243694470" fg:w="7485450"/><text x="84.0689%" y="159.50">co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,485,450 samples, 2.57%)</title><rect x="83.8189%" y="133" width="2.5746%" height="15" fill="rgb(221,155,16)" fg:x="243694470" fg:w="7485450"/><text x="84.0689%" y="143.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (2,415,238 samples, 0.83%)</title><rect x="85.5628%" y="117" width="0.8307%" height="15" fill="rgb(215,215,53)" fg:x="248764682" fg:w="2415238"/><text x="85.8128%" y="127.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,179,821 samples, 0.41%)</title><rect x="86.3935%" y="229" width="0.4058%" height="15" fill="rgb(223,4,10)" fg:x="251179920" fg:w="1179821"/><text x="86.6435%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,179,821 samples, 0.41%)</title><rect x="86.3935%" y="213" width="0.4058%" height="15" fill="rgb(234,103,6)" fg:x="251179920" fg:w="1179821"/><text x="86.6435%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,179,821 samples, 0.41%)</title><rect x="86.3935%" y="197" width="0.4058%" height="15" fill="rgb(227,97,0)" fg:x="251179920" fg:w="1179821"/><text x="86.6435%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="213" width="1.7182%" height="15" fill="rgb(234,150,53)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="197" width="1.7182%" height="15" fill="rgb(228,201,54)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="181" width="1.7182%" height="15" fill="rgb(222,22,37)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="165" width="1.7182%" height="15" fill="rgb(237,53,32)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="175.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="149" width="1.7182%" height="15" fill="rgb(233,25,53)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="133" width="1.7182%" height="15" fill="rgb(210,40,34)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="117" width="1.7182%" height="15" fill="rgb(241,220,44)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="127.50"></text></g><g><title>[libc.so.6] (4,995,439 samples, 1.72%)</title><rect x="86.7993%" y="101" width="1.7182%" height="15" fill="rgb(235,28,35)" fg:x="252359741" fg:w="4995439"/><text x="87.0493%" y="111.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2,405,535 samples, 0.83%)</title><rect x="88.5175%" y="213" width="0.8274%" height="15" fill="rgb(210,56,17)" fg:x="257355180" fg:w="2405535"/><text x="88.7675%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2,405,535 samples, 0.83%)</title><rect x="88.5175%" y="197" width="0.8274%" height="15" fill="rgb(224,130,29)" fg:x="257355180" fg:w="2405535"/><text x="88.7675%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,405,535 samples, 0.83%)</title><rect x="88.5175%" y="181" width="0.8274%" height="15" fill="rgb(235,212,8)" fg:x="257355180" fg:w="2405535"/><text x="88.7675%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (39,391,331 samples, 13.55%)</title><rect x="76.6754%" y="325" width="13.5487%" height="15" fill="rgb(223,33,50)" fg:x="222925677" fg:w="39391331"/><text x="76.9254%" y="335.50">std::collections::ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (39,391,331 samples, 13.55%)</title><rect x="76.6754%" y="309" width="13.5487%" height="15" fill="rgb(219,149,13)" fg:x="222925677" fg:w="39391331"/><text x="76.9254%" y="319.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (39,391,331 samples, 13.55%)</title><rect x="76.6754%" y="293" width="13.5487%" height="15" fill="rgb(250,156,29)" fg:x="222925677" fg:w="39391331"/><text x="76.9254%" y="303.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11,137,088 samples, 3.83%)</title><rect x="86.3935%" y="277" width="3.8306%" height="15" fill="rgb(216,193,19)" fg:x="251179920" fg:w="11137088"/><text x="86.6435%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,137,088 samples, 3.83%)</title><rect x="86.3935%" y="261" width="3.8306%" height="15" fill="rgb(216,135,14)" fg:x="251179920" fg:w="11137088"/><text x="86.6435%" y="271.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11,137,088 samples, 3.83%)</title><rect x="86.3935%" y="245" width="3.8306%" height="15" fill="rgb(241,47,5)" fg:x="251179920" fg:w="11137088"/><text x="86.6435%" y="255.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (9,957,267 samples, 3.42%)</title><rect x="86.7993%" y="229" width="3.4248%" height="15" fill="rgb(233,42,35)" fg:x="252359741" fg:w="9957267"/><text x="87.0493%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2,556,293 samples, 0.88%)</title><rect x="89.3449%" y="213" width="0.8792%" height="15" fill="rgb(231,13,6)" fg:x="259760715" fg:w="2556293"/><text x="89.5949%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2,556,293 samples, 0.88%)</title><rect x="89.3449%" y="197" width="0.8792%" height="15" fill="rgb(207,181,40)" fg:x="259760715" fg:w="2556293"/><text x="89.5949%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,556,293 samples, 0.88%)</title><rect x="89.3449%" y="181" width="0.8792%" height="15" fill="rgb(254,173,49)" fg:x="259760715" fg:w="2556293"/><text x="89.5949%" y="191.50"></text></g><g><title>cfree (7,757,432 samples, 2.67%)</title><rect x="90.2241%" y="309" width="2.6682%" height="15" fill="rgb(221,1,38)" fg:x="262317008" fg:w="7757432"/><text x="90.4741%" y="319.50">cf..</text></g><g><title>core::mem::replace (2,412,048 samples, 0.83%)</title><rect x="92.8923%" y="293" width="0.8296%" height="15" fill="rgb(206,124,46)" fg:x="270074440" fg:w="2412048"/><text x="93.1423%" y="303.50"></text></g><g><title>core::ptr::read (2,412,048 samples, 0.83%)</title><rect x="92.8923%" y="277" width="0.8296%" height="15" fill="rgb(249,21,11)" fg:x="270074440" fg:w="2412048"/><text x="93.1423%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,513,043 samples, 0.86%)</title><rect x="93.7219%" y="245" width="0.8644%" height="15" fill="rgb(222,201,40)" fg:x="272486488" fg:w="2513043"/><text x="93.9719%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,513,043 samples, 0.86%)</title><rect x="93.7219%" y="229" width="0.8644%" height="15" fill="rgb(235,61,29)" fg:x="272486488" fg:w="2513043"/><text x="93.9719%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (7,636,793 samples, 2.63%)</title><rect x="93.7219%" y="293" width="2.6267%" height="15" fill="rgb(219,207,3)" fg:x="272486488" fg:w="7636793"/><text x="93.9719%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7,636,793 samples, 2.63%)</title><rect x="93.7219%" y="277" width="2.6267%" height="15" fill="rgb(222,56,46)" fg:x="272486488" fg:w="7636793"/><text x="93.9719%" y="287.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7,636,793 samples, 2.63%)</title><rect x="93.7219%" y="261" width="2.6267%" height="15" fill="rgb(239,76,54)" fg:x="272486488" fg:w="7636793"/><text x="93.9719%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="245" width="1.7623%" height="15" fill="rgb(231,124,27)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="229" width="1.7623%" height="15" fill="rgb(249,195,6)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="213" width="1.7623%" height="15" fill="rgb(237,174,47)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="197" width="1.7623%" height="15" fill="rgb(206,201,31)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="181" width="1.7623%" height="15" fill="rgb(231,57,52)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="191.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="165" width="1.7623%" height="15" fill="rgb(248,177,22)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="149" width="1.7623%" height="15" fill="rgb(215,211,37)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="133" width="1.7623%" height="15" fill="rgb(241,128,51)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="143.50"></text></g><g><title>[libc.so.6] (5,123,750 samples, 1.76%)</title><rect x="94.5863%" y="117" width="1.7623%" height="15" fill="rgb(227,165,31)" fg:x="274999531" fg:w="5123750"/><text x="94.8363%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,606,020 samples, 0.90%)</title><rect x="96.3486%" y="261" width="0.8963%" height="15" fill="rgb(228,167,24)" fg:x="280123281" fg:w="2606020"/><text x="96.5986%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,606,020 samples, 0.90%)</title><rect x="96.3486%" y="245" width="0.8963%" height="15" fill="rgb(228,143,12)" fg:x="280123281" fg:w="2606020"/><text x="96.5986%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,606,020 samples, 0.90%)</title><rect x="96.3486%" y="229" width="0.8963%" height="15" fill="rgb(249,149,8)" fg:x="280123281" fg:w="2606020"/><text x="96.5986%" y="239.50"></text></g><g><title>_start (253,864,855 samples, 87.32%)</title><rect x="11.6335%" y="469" width="87.3170%" height="15" fill="rgb(243,35,44)" fg:x="33823068" fg:w="253864855"/><text x="11.8835%" y="479.50">_start</text></g><g><title>__libc_start_main (253,864,855 samples, 87.32%)</title><rect x="11.6335%" y="453" width="87.3170%" height="15" fill="rgb(246,89,9)" fg:x="33823068" fg:w="253864855"/><text x="11.8835%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (253,864,855 samples, 87.32%)</title><rect x="11.6335%" y="437" width="87.3170%" height="15" fill="rgb(233,213,13)" fg:x="33823068" fg:w="253864855"/><text x="11.8835%" y="447.50">[libc.so.6]</text></g><g><title>main (253,864,855 samples, 87.32%)</title><rect x="11.6335%" y="421" width="87.3170%" height="15" fill="rgb(233,141,41)" fg:x="33823068" fg:w="253864855"/><text x="11.8835%" y="431.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (253,412,996 samples, 87.16%)</title><rect x="11.7889%" y="405" width="87.1616%" height="15" fill="rgb(239,167,4)" fg:x="34274927" fg:w="253412996"/><text x="12.0389%" y="415.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (253,412,996 samples, 87.16%)</title><rect x="11.7889%" y="389" width="87.1616%" height="15" fill="rgb(209,217,16)" fg:x="34274927" fg:w="253412996"/><text x="12.0389%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>lyronc::main (253,412,996 samples, 87.16%)</title><rect x="11.7889%" y="373" width="87.1616%" height="15" fill="rgb(219,88,35)" fg:x="34274927" fg:w="253412996"/><text x="12.0389%" y="383.50">lyronc::main</text></g><g><title>lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program (253,412,996 samples, 87.16%)</title><rect x="11.7889%" y="357" width="87.1616%" height="15" fill="rgb(220,193,23)" fg:x="34274927" fg:w="253412996"/><text x="12.0389%" y="367.50">lyronc::codegen::program::&lt;impl lyronc::codegen::Visitor&gt;::visit_program</text></g><g><title>lyronc::codegen::program::VM::_run (249,954,271 samples, 85.97%)</title><rect x="12.9785%" y="341" width="85.9719%" height="15" fill="rgb(230,90,52)" fg:x="37733652" fg:w="249954271"/><text x="13.2285%" y="351.50">lyronc::codegen::program::VM::_run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (25,370,915 samples, 8.73%)</title><rect x="90.2241%" y="325" width="8.7263%" height="15" fill="rgb(252,106,19)" fg:x="262317008" fg:w="25370915"/><text x="90.4741%" y="335.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17,613,483 samples, 6.06%)</title><rect x="92.8923%" y="309" width="6.0582%" height="15" fill="rgb(206,74,20)" fg:x="270074440" fg:w="17613483"/><text x="93.1423%" y="319.50">hashbrow..</text></g><g><title>hashbrown::map::make_hash (7,564,642 samples, 2.60%)</title><rect x="96.3486%" y="293" width="2.6019%" height="15" fill="rgb(230,138,44)" fg:x="280123281" fg:w="7564642"/><text x="96.5986%" y="303.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (7,564,642 samples, 2.60%)</title><rect x="96.3486%" y="277" width="2.6019%" height="15" fill="rgb(235,182,43)" fg:x="280123281" fg:w="7564642"/><text x="96.5986%" y="287.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="261" width="1.7055%" height="15" fill="rgb(242,16,51)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="245" width="1.7055%" height="15" fill="rgb(248,9,4)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="229" width="1.7055%" height="15" fill="rgb(210,31,22)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="213" width="1.7055%" height="15" fill="rgb(239,54,39)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="197" width="1.7055%" height="15" fill="rgb(230,99,41)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="181" width="1.7055%" height="15" fill="rgb(253,106,12)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="165" width="1.7055%" height="15" fill="rgb(213,46,41)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="149" width="1.7055%" height="15" fill="rgb(215,133,35)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (4,958,622 samples, 1.71%)</title><rect x="97.2449%" y="133" width="1.7055%" height="15" fill="rgb(213,28,5)" fg:x="282729301" fg:w="4958622"/><text x="97.4949%" y="143.50"></text></g><g><title>core::fmt::write (2,549,990 samples, 0.88%)</title><rect x="98.9504%" y="469" width="0.8771%" height="15" fill="rgb(215,77,49)" fg:x="287687923" fg:w="2549990"/><text x="99.2004%" y="479.50"></text></g><g><title>all (290,739,417 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="290739417"/><text x="0.2500%" y="511.50"></text></g><g><title>lyronc (290,739,417 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="290739417"/><text x="0.2500%" y="495.50">lyronc</text></g><g><title>core::ptr::drop_in_place&lt;lyronc::codegen::Value&gt; (501,504 samples, 0.17%)</title><rect x="99.8275%" y="469" width="0.1725%" height="15" fill="rgb(219,133,21)" fg:x="290237913" fg:w="501504"/><text x="100.0775%" y="479.50"></text></g></svg></svg>